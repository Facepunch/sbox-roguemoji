@using System;
@using Sandbox;
@using Sandbox.UI;

@inherits GridPanel;
@namespace Roguemoji

<style>
    .arena_panel
    {
        overflow: hidden;
    }

    .grid_bg 
    {
        opacity: 1;
        position:absolute;
        pointer-events:all;
        background-repeat: repeat;
        background-size: 80px;
        border-radius:3px;
        width:100%;
        height:100%;
    }
</style>

<root class="arena_panel">
    <div class="grid_bg" style="background-image: url( textures/bg_tile_green.png );" @ref=GridBg></div>
    
    @{
        var player = RoguemojiGame.Instance.LocalPlayer;
    }

    @if (RoguemojiGame.Instance.Levels[player.CurrentLevelId].GridManager?.Things == null)
    {
        return;
    }

    @foreach(Thing thing in GetThings())
    {
        if(player.IsGridPosVisible(thing.GridPos))
        {
            var offsetGridPos = thing.GridPos - player.CameraGridOffset;
            var index = GetIndex(offsetGridPos);
            <GridCell style="left: @((offsetGridPos.x * 40) + player.CameraPixelOffset.x + thing.Offset.x * ScaleToScreen); top: @((offsetGridPos.y * 40) + player.CameraPixelOffset.y + thing.Offset.y * ScaleToScreen);" Thing=@thing GridIndex=@index @onmouseover=@(() => HoveredCellIndex = index )) />    
        }
    }
</root>

@code
{
    public Panel GridBg { get; protected set; }

    public override int GridWidth => RoguemojiGame.ArenaWidth;
    public override int GridHeight => RoguemojiGame.ArenaHeight;

    protected override IList<Thing> GetThings()
    {
        var player = RoguemojiGame.Instance.LocalPlayer;
        return RoguemojiGame.Instance.Levels[player.CurrentLevelId].GridManager?.Things ?? new List<Thing>();
    }

    public override void Tick()
    {
        base.Tick();

        StateHasChanged();
    }

    protected override void OnMouseDown(MousePanelEvent e)
    {
        base.OnMouseDown(e);

        Log.Info("ArenaPanel:OnMouseDown");

        var player = RoguemojiGame.Instance.LocalPlayer;
        Hud.Instance.GridCellClickedArena(GetGridPos(MousePosition) + player.CameraGridOffset, rightClick: e.Button == "mouseright", shift: Input.Down(InputButton.Run));
    }

    protected override int BuildHash()
    {
        var player = RoguemojiGame.Instance.LocalPlayer;
        return HashCode.Combine(GetThings().Count, player.CameraGridOffset, player.CameraPixelOffset);
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        var player = RoguemojiGame.Instance.LocalPlayer;
        GridBg.Style.Set($"background-position: {((player.CameraGridOffset.x % 2 == 0 ? -40f : -80f) + player.CameraPixelOffset.x * 0.9f) * ScaleToScreen}px {((player.CameraGridOffset.y % 2 == 0 ? -40f : -80f) + player.CameraPixelOffset.y * 0.9f) * ScaleToScreen}px;");
    }

    bool IsOdd(IntVector gridPos)
    {
        return gridPos.x % 2 == gridPos.y % 2;
    }
}