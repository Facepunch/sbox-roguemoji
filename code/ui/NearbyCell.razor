@using Sandbox;
@using Sandbox.UI;
@using System;
@using System.Linq;

@inherits Panel;
@namespace Roguemoji

<style>
    .nearby_icon
    {
        pointer-events:all;
        font-size: 29px;
        border: 1px solid #00000000;
        justify-content:center;
        align-items: center;
        text-align: center;
        width: 40px;
        height: 40px;
        padding-bottom: 4px;
        flex-shrink: 0;
    }

    .nearby_selected 
    {
        border: 1px solid #bbbbff44;
        border-radius:3px;
    }

    .dragging
    {
        opacity: 0.2;
        transition: opacity 0.1s ease-in;
    }

    .nearby_cell_tattoo
    {
        width: 100%;
        height: 100%;
        padding-top: 4px;
        position: absolute;
        //background-color: #0000ff88;
        justify-content: center;
        align-items: center;
    }
</style>

<root class="nearby_icon @GetSelectedClass()">
    <div class="@GetPlayerClass() @GetDraggingClass()" @ref=IconPanel>
        @Thing.DisplayIcon

        @if(Thing.HasTattoo)
        {
            int fontSize = MathX.FloorToInt(29f * Thing.TattooScale);
            var offset = Thing.TattooOffset;
            <div class="nearby_cell_tattoo" style="font-size: @(fontSize)px; left: @(offset.x + 1)px; top: @(offset.y + 1.1)px;">
                @Thing.TattooIcon
            </div>
        }
    </div>
</root>

@code
{
    public Panel IconPanel { get; set; }
    public Thing Thing { get; set; }

    string GetPlayerClass()
    {
        return Thing.PlayerNum > 0 ? $"icon-player-{Thing.PlayerNum}" : "";
    }

    string GetSelectedClass()
    {
        return IsSelected() ? "nearby_selected" : "";
    }

    string GetDraggingClass()
    {
        return Thing == Hud.Instance.DraggedThing ? "dragging" : "";
    }

    bool IsSelected()
    {
        return Thing == RoguemojiGame.Instance.LocalPlayer?.SelectedThing;
    }

    protected override Panel CreateTooltipPanel()
    {
        var panel = Hud.Instance.AddChild<CellTooltip>();
        panel.Text = Tooltip;
        panel.Thing = Thing;

        var player = RoguemojiGame.Instance.LocalPlayer;
        var topItem = player.ContainingGridManager.GetThingsAtClient(player.GridPos).WithNone(ThingFlags.Solid).OrderByDescending(x => x.GetZPos()).FirstOrDefault();
        panel.ShowPickUpKey = (Thing == topItem);

        panel.AddClass($"player-{Thing.PlayerNum}");
        return panel;
    }

    protected override int BuildHash()
    {
        if (Thing == null)
            return base.BuildHash();

        return HashCode.Combine(Thing.GetNearbyCellHash(), IsSelected());
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (Thing == null)
            return;

        Tooltip = Thing.Tooltip;
    }

    protected override void OnMouseDown(MousePanelEvent e)
    {
        base.OnMouseDown(e);

        bool rightClick = e.Button == "mouseright";
        bool shift = Input.Down(InputButton.Run);

        if(shift || rightClick)
            RoguemojiGame.NearbyThingClickedCmd(Thing.NetworkIdent, rightClick, shift, doubleClick: false);
        else
            Hud.Instance.StartDragging(Thing, this, rightClick, PanelType.Nearby);

        e.StopPropagation();
    }

    protected override void OnDoubleClick(MousePanelEvent e)
    {
        base.OnDoubleClick(e);

        bool shift = Input.Down(InputButton.Run);
        bool rightClick = e.Button == "mouseright";

        RoguemojiGame.NearbyThingClickedCmd(Thing.NetworkIdent, rightClick, shift, doubleClick: true);
        Hud.Instance.StopDragging();

        e.StopPropagation();
    }

    void DrawDebugText(string text)
    {
        DebugOverlay.ScreenText(text, PanelPositionToScreenPosition(Vector2.Zero), 0, Color.White, 0f);
    }
}