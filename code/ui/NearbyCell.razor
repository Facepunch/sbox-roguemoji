@using Sandbox;
@using Sandbox.UI;
@using System;

@inherits Panel;
@namespace Interfacer

<style>
    .nearby_icon
    {
        pointer-events:all;
        font-size: 29px;
        flex-shrink: 0;
        border: 1px solid #00000000;
        justify-content:center;
    }

    .nearby_selected 
    {
        border: 1px solid #bbbbff44;
        border-radius:3px;
    }

    .player-1 { text-stroke-color: #3333ff; text-stroke-width: 4px; }
    .player-2 { text-stroke-color: #ff0000; text-stroke-width: 4px; }
    .player-3 { text-stroke-color: #009900; text-stroke-width: 4px; }
    .player-4 { text-stroke-color: #ff00ff; text-stroke-width: 4px; }
    .player-5 { text-stroke-color: #ffff00; text-stroke-width: 4px; }
    .player-6 { text-stroke-color: #2299ff; text-stroke-width: 4px; }
    .player-7 { text-stroke-color: #8800bb; text-stroke-width: 4px; }
    .player-8 { text-stroke-color: #ff8800; text-stroke-width: 4px; }
</style>

<root class="nearby_icon @GetSelectedClass()">
    <div class="@GetPlayerClass()" @ref=IconPanel>@Thing.DisplayIcon</div>
</root>

@code
{
    public Panel IconPanel { get; set; }
    public Thing Thing { get; set; }

    string GetPlayerClass()
    {
        return Thing.PlayerNum > 0 ? $"player-{Thing.PlayerNum}" : "";
    }

    string GetSelectedClass()
    {
        return IsSelected() ? "nearby_selected" : "";
    }

    bool IsSelected()
    {
        return Thing == InterfacerGame.Instance.LocalPlayer?.SelectedThing;
    }

    protected override Panel CreateTooltipPanel()
    {
        var panel = Hud.Instance.AddChild<CellTooltip>();
        panel.Text = Tooltip;
        panel.AddClass($"player-{Thing.PlayerNum}");
        return panel;
    }

    protected override int BuildHash()
    {
        if (Thing == null)
            return base.BuildHash();

        return HashCode.Combine(Thing.GetNearbyCellHash(), IsSelected());
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (Thing == null)
            return;

        Tooltip = Thing.Tooltip;
    }

    protected override void OnMouseDown(MousePanelEvent e)
    {
        base.OnMouseDown(e);

        //Log.Info("NearbyCell:OnMouseDown - " + Thing.DisplayName);

        bool rightClick = e.Button == "mouseright";
        InterfacerGame.NearbyThingClickedCmd(Thing.NetworkIdent, rightClick);
    }

    void DrawDebugText(string text)
    {
        DebugOverlay.ScreenText(text, PanelPositionToScreenPosition(Vector2.Zero), 0, Color.White, 0f);
    }
}