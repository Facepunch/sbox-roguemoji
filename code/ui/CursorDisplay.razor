@using Sandbox;
@using Sandbox.UI;
@using System.Collections.Generic;
@using System;

@inherits Panel;
@namespace Roguemoji

<style>
    .cursor_display
    {
        width: 100%;
        height: 100%;
        pointer-events: none;
        overflow: visible;
        position: absolute;
        z-index: 20005;
    }

    .cursor_draw
    {
        width: 40px;
        height: 40px;
        position: absolute;
        font-size: 29px;
        color: white;
        z-index: 110;
        justify-content: center;
        align-items: center;
        //text-shadow: 0px 2px 1px #000000;
    }
</style>

<root class="cursor_display">
    @{
        var player = RoguemojiGame.Instance.LocalPlayer;
        var pos = MousePosition / ScaleToScreen;
        var cursorMode = GetCursorMode();
        var offset = GetCursorOffset(cursorMode);
    }

    <div class="cursor_draw" style="left: @(pos.x + offset.x); top: @(pos.y + offset.y);">
        @(GetCursorIcon(cursorMode))
    </div>
</root>

@code
{
    CursorMode GetCursorMode()
    {
        var targetPanelType = Hud.Instance.GetContainingPanelType(MousePosition);

        if (Hud.Instance.IsDraggingThing)
        {
            var draggingEquipment = Hud.Instance.DraggedThing.HasFlag(ThingFlags.Equipment);

            if (targetPanelType == PanelType.Chatbox || targetPanelType == PanelType.Log)
                return CursorMode.Write;
            else if (draggingEquipment && targetPanelType == PanelType.Wielding || !draggingEquipment && targetPanelType == PanelType.EquipmentGrid)
                return CursorMode.Invalid;
            else if (targetPanelType == PanelType.ArenaGrid || targetPanelType == PanelType.Nearby)
                return CursorMode.PointDown;
            else if (Hud.Instance.TimeSinceStartDragging > 0.15f || (MousePosition - Hud.Instance.DragStartPosition).Length > 4)
                return CursorMode.Pinch;
        }

        if(targetPanelType == PanelType.ArenaGrid)
        {
            var player = RoguemojiGame.Instance.LocalPlayer;
            var arenaPanel = Hud.Instance.GetGridPanel(GridType.Arena);
            var gridPos = arenaPanel.GetGridPos(arenaPanel.MousePosition) + player.CameraGridOffset;

            if (player.IsAiming && player.AimingCells.Contains(gridPos))
            {
                if(player.AimingType == AimingType.Direction)
                {
                    var direction = GridManager.GetDirectionForIntVector(gridPos - player.GridPos);
                    switch (direction)
                    {
                        case Direction.Left: return CursorMode.PointLeft;
                        case Direction.Right: return CursorMode.PointRight;
                        case Direction.Down: return CursorMode.PointDown;
                        case Direction.Up: return CursorMode.Point2;
                    }
                }
                else if(player.AimingType == AimingType.TargetCell)
                {
                    //return CursorMode.Pin;
                }
            }
        }

        return CursorMode.Point;
    }

    string GetCursorIcon(CursorMode cursorMode)
    {
        switch(cursorMode)
        {
            case CursorMode.Point: default: return "👆️";
            case CursorMode.Pinch: return "🤏";
            case CursorMode.Invalid: return "❌";
            case CursorMode.Write: return "✍️";
            case CursorMode.PointDown: return "👇️";
            case CursorMode.ThumbsUp: return "👍️";
            case CursorMode.Ok: return "👌";
            case CursorMode.Check: return "✔️";
            case CursorMode.MiddleFinger: return "🖕";
            case CursorMode.Point2: return "☝️";
            case CursorMode.PointLeft: return "👈️";
            case CursorMode.PointRight: return "👉️";
        }
    }

    IntVector GetCursorOffset(CursorMode cursorMode)
    {
        switch (cursorMode)
        {
            case CursorMode.Point: default: return new IntVector(-14, -6);
            case CursorMode.Pinch: return new IntVector(-6, -14);
            case CursorMode.Invalid: return new IntVector(-10, -12);
            case CursorMode.Write: return new IntVector(-6, -30);
            case CursorMode.PointDown: return new IntVector(-24, -32);
            case CursorMode.ThumbsUp: return new IntVector(-20, -10);
            case CursorMode.Ok: return new IntVector(-12, -19);
            case CursorMode.Check: return new IntVector(-8, -16);
            case CursorMode.MiddleFinger: return new IntVector(-18, -5);
            case CursorMode.Point2: return new IntVector(-24, -6);
            case CursorMode.PointLeft: return new IntVector(-5, -20);
            case CursorMode.PointRight: return new IntVector(-31, -18);
        }
    }

    public override void Tick()
    {
        base.Tick();

        StateHasChanged();
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Game.Random.Int(0, 999));
    }
}