@using Sandbox;
@using Sandbox.UI;
@using System.Collections.Generic;
@using System;

@inherits Panel;
@namespace Roguemoji

<style>
    .cursor_display
    {
        width: 100%;
        height: 100%;
        pointer-events: none;
        overflow: visible;
        position: absolute;
        z-index: 10002;
    }

    .cursor_draw
    {
        width: 40px;
        height: 40px;
        position: absolute;
        font-size: 29px;
        color: white;
        z-index: 110;
        justify-content: center;
        align-items: center;
        //text-shadow: 0px 2px 1px #000000;
    }
</style>

<root class="cursor_display">
    @{
        var player = RoguemojiGame.Instance.LocalPlayer;
        var pos = MousePosition / ScaleToScreen;
        var cursorMode = GetCursorMode();
        var offset = GetCursorOffset(cursorMode);
    }

    <div class="cursor_draw" style="left: @(pos.x + offset.x); top: @(pos.y + offset.y);">
        @(GetCursorIcon(cursorMode))
    </div>
</root>

@code
{
    CursorMode GetCursorMode()
    {
        var targetPanelType = Hud.Instance.GetContainingPanelType(MousePosition);

        if (Hud.Instance.IsDraggingThing)
        {
            var draggingEquipment = Hud.Instance.DraggedThing.Flags.HasFlag(ThingFlags.Equipment);

            if (targetPanelType == PanelType.Chatbox || targetPanelType == PanelType.Log)
                return CursorMode.Write;
            else if (draggingEquipment && targetPanelType == PanelType.Wielding || !draggingEquipment && targetPanelType == PanelType.EquipmentGrid)
                return CursorMode.Invalid;
            else if (targetPanelType == PanelType.ArenaGrid || targetPanelType == PanelType.Nearby)
                return CursorMode.Drop;
            else if (Hud.Instance.TimeSinceStartDragging > 0.15f || (MousePosition - Hud.Instance.DragStartPosition).Length > 4)
                return CursorMode.Pinch;
        }

        return CursorMode.Point;
    }

    string GetCursorIcon(CursorMode cursorMode)
    {
        switch(cursorMode)
        {
            case CursorMode.Point: default: return "👆️";
            case CursorMode.Pinch: return "🤏";
            case CursorMode.Invalid: return "❌";
            case CursorMode.Write: return "✍️";
            case CursorMode.Drop: return "👇️";
        }
    }

    IntVector GetCursorOffset(CursorMode cursorMode)
    {
        switch (cursorMode)
        {
            case CursorMode.Point: default: return new IntVector(-14, -6);
            case CursorMode.Pinch: return new IntVector(-6, -14);
            case CursorMode.Invalid: return new IntVector(-14, -6);
            case CursorMode.Write: return new IntVector(-6, -30);
            case CursorMode.Drop: return new IntVector(-24, -32);
        }
    }

    public override void Tick()
    {
        base.Tick();

        StateHasChanged();

        Log.Info($"{Hud.Instance.GetContainingPanelType(MousePosition)}");
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Game.Random.Int(0, 999));
    }
}