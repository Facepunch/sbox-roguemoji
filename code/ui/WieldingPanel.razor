@using Sandbox;
@using Sandbox.UI;
@using System;

@inherits Panel;
@namespace Roguemoji

<style>
    .wielding {
        width: 70px;
        height: 70px;
        font-size: 48px;
        align-items: center;
        justify-content: center;
        border: 1px solid #303030;
        border-radius: 3px;
        padding-bottom: 4px;
        pointer-events: all;
        margin-bottom: 10px;
    }

    .is_wielding_something {
        background-color: #5555ff11;
    }

    .not_wielding_anything {
        color: transparent;
        text-shadow: 0 0 0.01px #00000099;
    }

    .wielding_cooldown {
        color: #ffffff66;
    }

    .wielding_tattoo {
        width: 100%;
        height: 100%;
        position: absolute;
        //background-color: #0000ff88;
        justify-content: center;
        align-items: center;
        text-stroke-color: #000000;
        text-stroke-width: 2px;
    }

    .wielding_cooldown_overlay {
        position: absolute;
        width: 100%;
        background-color: #000000bb;
        bottom: 0px;
        transform-origin: bottom;
        border-radius: 3px;
    }

    .wielding_cooldown_text {
        font-size: 24px;
        color: #aaaaaadd;
        text-stroke-color: #000000dd;
        text-stroke-width: 8px;
        position: absolute;
        justify-content: center;
        align-items: center;
        text-align: center;
        font-family: RobotoMono;
    }

    .wielding_frame {
        width: 70px;
        height: 70px;
        position: absolute;
        border-radius: 3px;
        border: 1px solid #303030;
    }
</style>

@{
    var player = RoguemojiGame.Instance.LocalPlayer;
    var wieldedThing = player.WieldedThing;
}

<root class="wielding @GetWieldingClass(wieldedThing)" style="border-color: @(wieldedThing == null || !wieldedThing.Flags.HasFlag(ThingFlags.Useable) ? "#303030" : "#777777");">
    @if(wieldedThing == null)
    {
        <div>🖐️</div>
    }
    else
    {
        <div class="@GetCooldownClass(wieldedThing)">
            @(wieldedThing.DisplayIcon.Substring(wieldedThing.CharSkip))
        </div>

        @if(wieldedThing.HasTattoo)
        {
            int fontSize = MathX.FloorToInt(48f * wieldedThing.TattooData.Scale);
            var offset = wieldedThing.TattooData.OffsetCharWielded;
            <div class="wielding_tattoo" style="font-size: @(fontSize)px; left: @(offset.x)px; top: @(offset.y)px;">
                @(wieldedThing.TattooData.Icon)
            </div>
        }

        @if (wieldedThing.IsOnCooldown)
        {
            var cooldownTimer = (wieldedThing.CooldownTimer < 9.8f ? wieldedThing.CooldownTimer : MathF.Ceiling(wieldedThing.CooldownTimer));

            <div class="wielding_cooldown_overlay" style="height: @((1f - Utils.EasePercent(wieldedThing.CooldownProgressPercent, EasingType.Linear)) * 100f)%;"></div>
            <div class="wielding_cooldown_text"> @(cooldownTimer.ToString(cooldownTimer < 9.8f ? "N1" : "N0")) </div>
            <div class="wielding_frame"></div>
        }
    }
</root>

@code
{
    string GetWieldingClass(Thing thing) { return thing != null ? "is_wielding_something" : "not_wielding_anything"; }
    string GetCooldownClass(Thing thing) { return thing != null && thing.IsOnCooldown ? "wielding_cooldown" : ""; }

    protected override Panel CreateTooltipPanel()
    {
        var panel = Hud.Instance.AddChild<WieldingTooltip>();
        var player = RoguemojiGame.Instance.LocalPlayer;
        panel.Thing = player.WieldedThing;
        return panel;
    }

    protected override int BuildHash()
    {
        var player = RoguemojiGame.Instance.LocalPlayer;
        var wieldedThing = player.WieldedThing;
        var cooldownHash = wieldedThing != null && wieldedThing.IsOnCooldown ? wieldedThing.CooldownProgressPercent : 0f;

        return HashCode.Combine(wieldedThing?.NetworkIdent ?? 0, cooldownHash);
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        var player = RoguemojiGame.Instance.LocalPlayer;
        var wieldedThing = player.WieldedThing;
        Tooltip = (wieldedThing != null) ? "x" : "";
    }

    protected override void OnMouseDown(MousePanelEvent e)
    {
        base.OnMouseDown(e);

        bool rightClick = e.Button == "mouseright";
        bool shift = Input.Down(InputButton.Run);

        var player = RoguemojiGame.Instance.LocalPlayer;
        if (player == null || player.WieldedThing == null)
            return;

        if(shift || rightClick)
            Hud.Instance.WieldingClicked(rightClick, shift);
        else
            Hud.Instance.StartDragging(player.WieldedThing, this, rightClick, PanelType.Wielding);

        Hud.Instance.UnfocusChatbox();
    }
}