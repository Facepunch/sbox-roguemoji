@using Sandbox;
@using Sandbox.UI;
@using System;

@inherits Panel;
@namespace Roguemoji

<style>
    .wielding {
        width: 70px;
        height: 70px;
        font-size: 48px;
        align-items: center;
        justify-content: center;
        border: 1px solid #303030;
        border-radius: 3px;
        padding-bottom: 4px;
        pointer-events: all;
        margin-bottom: 16px;
        font-family: W10Emoji;
    }

    .is_wielding_something {
        background-color: #5555ff11;
    }

    .not_wielding_anything {
        color: transparent;
        text-shadow: 0 0 0.01px #00000099;
    }

    .wielding_cooldown {
        color: #ffffff66;
    }

    .wielding_tattoo {
        width: 100%;
        height: 100%;
        position: absolute;
        //background-color: #0000ff88;
        justify-content: center;
        align-items: center;
        text-stroke-color: #000000;
        text-stroke-width: 2px;
    }

    .wielding_cooldown_overlay {
        position: absolute;
        width: 100%;
        background-color: #000000bb;
        bottom: 0px;
        transform-origin: bottom;
        border-radius: 3px;
    }

    .wielding_cooldown_text {
        font-size: 24px;
        color: #aaaaaadd;
        text-stroke-color: #000000dd;
        text-stroke-width: 8px;
        position: absolute;
        justify-content: center;
        align-items: center;
        text-align: center;
        font-family: RobotoMono;
    }

    .wielding_stat_bar {
        width: 90%;
        height: 4px;
        background-color: #000000bb;
        align-self: center;
        position: absolute;
        bottom: 1px;
        border-radius: 1px;
    }

    .wielding_stat_bar_overlay {
        height: 100%;
        bottom: 0px;
        border-radius: 1px;
        position: absolute;
        align-self: center;
        transform-origin: left;
        //justify-content: left;
    }

    .wielding_frame {
        width: 70px;
        height: 70px;
        position: absolute;
        border-radius: 3px;
        border: 1px solid #303030;
    }

    .attack_container {
        position: absolute;
        width: 40px;
        height: 40px;
        color: #ffffff;
        justify-content: center;
        align-items: center;
        text-align: center;
        margin: 0px;
        padding: 0px;
        left: 44px;
        top: 44px;
        z-index: 4000;
    }

    .attack_icon {
        font-size: 26;
        //background-color: #0000ff22;
        position: absolute;
        text-stroke-color: #404040;
        text-stroke-width: 4px;
    }

    .attack_label {
        position: absolute;
        width: 40px;
        height: 40px;
        justify-content: center;
        align-items: center;
        text-align: center;
        font-size: 18;
        text-stroke-color: #000000ee;
        text-stroke-width: 6px;
        font-family: RobotoMono;
        padding-left: 1px;
    }
</style>

@{
    var player = RoguemojiGame.Instance.LocalPlayer;
    var wieldedThing = player.WieldedThing;
}

<root class="wielding @GetWieldingClass(wieldedThing)" style="border-color: @(wieldedThing == null || !wieldedThing.HasFlag(ThingFlags.Useable) ? "#303030" : "#777777");">
    @if(wieldedThing == null)
    {
        <div style="padding-bottom: 8px;">
            @Hud.GetHallucinationTextStr(Globals.Icon(IconType.UnarmedAttack), HallucinationTextType.Icon)
        </div>
    }
    else
    {
        <div class="@GetCooldownClass(wieldedThing) @Hud.GetUnusableClass(wieldedThing)" style="opacity:@(GetOpacity(wieldedThing));">
            @(Hud.GetHallucinationTextThing(wieldedThing, wieldedThing.DisplayIcon.Substring(wieldedThing.CharSkip), HallucinationTextType.Icon))

            @if(wieldedThing.HasTattoo)
            {
                int fontSize = MathX.FloorToInt(48f * wieldedThing.TattooData.Scale);
                var offset = wieldedThing.TattooData.OffsetCharWielded;
                <div class="wielding_tattoo" style="font-size: @(fontSize)px; left: @(offset.x)px; top: @(offset.y)px;">
                    @(Hud.GetHallucinationTextThing(wieldedThing, Hud.GetTattooIcon(wieldedThing), HallucinationTextType.Icon, tattoo: true))
                </div>
            }
        </div>

        @if (wieldedThing.HasStat(StatType.Durability))
        {
            int durability = wieldedThing.GetStatClamped(StatType.Durability);
            int durabilityMax = wieldedThing.GetStatMax(StatType.Durability);

            if (durability < durabilityMax && durability > 0)
            {
                var durabilityPercent = Math.Clamp((float)durability / (float)durabilityMax, 0f, 1f);

                <div class="wielding_stat_bar">
                    <div class="wielding_stat_bar_overlay" style="width: @(durabilityPercent * 100f)%; background-color: @(Thing.GetStatColor(StatType.Durability));"></div>
                </div>
            }
        }

        @if(wieldedThing.HasFloaters)
        {
            foreach (var floater in wieldedThing.Floaters)
            {
                Vector2 pos = new Vector2(13f, 12f);

                float scale = floater.height > 0f ? floater.scale * Utils.MapReturn(floater.timeSinceStart, 0f, floater.time, 1f, 1.2f, EasingType.SineInOut) : floater.scale;
                float fontSize = 48f * scale;

                Vector2 offset = floater.time > 0f ? Vector2.Lerp(floater.offsetStart, floater.offsetEnd, Utils.Map(floater.timeSinceStart, 0f, floater.time, 0f, 1f, floater.offsetEasingType)) : floater.offsetStart;

                if (floater.shakeAmount > 0f)
                    offset += new Vector2(Game.Random.Float(-floater.shakeAmount, floater.shakeAmount), Game.Random.Float(-floater.shakeAmount, floater.shakeAmount));

                float height = floater.height > 0f ? Utils.MapReturn(floater.timeSinceStart, 0f, floater.time, 0f, floater.height, EasingType.SineInOut) : 0f;

                float growAmount = 48f / 29f;
                offset *= growAmount;
                height *= growAmount;

                var opacity = floater.time > 0f ? (floater.timeSinceStart < floater.fadeInTime ? Utils.Map(floater.timeSinceStart, 0f, floater.fadeInTime, 0f, floater.opacity, EasingType.SineIn) : Utils.Map(floater.timeSinceStart, floater.fadeInTime, floater.time, floater.opacity, 0f, floater.offsetEasingType)) : floater.opacity;

                //Log.Info($"{floater.icon} pos: {pos}");

                <div class="floater_draw" style="left: @(pos.x + offset.x)px; top: @(pos.y + offset.y - height)px; opacity: @(opacity); font-size: @(fontSize)px;">
                    @(Hud.GetHallucinationTextStr(floater.icon, HallucinationTextType.Icon))

                    @if (!string.IsNullOrEmpty(floater.text))
                    {
                        <div class="floater_text" style="top: @((13f / growAmount) * scale)px; font-size: @(fontSize * 0.72f);"> @(floater.text) </div>
                    }
                </div>
            }
        }

        @if (wieldedThing.IsOnCooldown)
        {
            var cooldownTimer = (wieldedThing.CooldownTimer < 9.8f ? wieldedThing.CooldownTimer : MathF.Ceiling(wieldedThing.CooldownTimer));

            <div class="wielding_cooldown_overlay" style="height: @((1f - Utils.EasePercent(wieldedThing.CooldownProgressPercent, EasingType.Linear)) * 100f)%;"></div>
            <div class="wielding_cooldown_text"> @(cooldownTimer.ToString(cooldownTimer < 9.8f ? "N1" : "N0")) </div>
            <div class="wielding_frame"></div>
        }
    }

    @{
        var attackDamage = player.GetAttackDamage(checkWielded: true);
    }

    <div class="attack_container">
        <div class="attack_icon" style="opacity:@(attackDamage > 0 ? 0.7f : 0.15f);">
            @(Thing.GetStatIcon(StatType.Attack))
        </div>

        <div class="attack_label" style="opacity:@(attackDamage > 0 ? 1f : 0.3f);">
            @(attackDamage)
        </div>
    </div>
</root>

@code
{
    string GetWieldingClass(Thing thing) { return thing != null ? "is_wielding_something" : "not_wielding_anything"; }
    string GetCooldownClass(Thing thing) { return thing != null && thing.IsOnCooldown ? "wielding_cooldown" : ""; }
    float GetOpacity(Thing thing) { return thing.Opacity * (thing.GetStatClamped(StatType.Invisible) > 0 ? 0.25f : 1f); }

    protected override Panel CreateTooltipPanel()
    {
        var panel = Hud.Instance.AddChild<WieldingTooltip>();
        var player = RoguemojiGame.Instance.LocalPlayer;
        panel.Thing = player.WieldedThing;
        return panel;
    }

    protected override int BuildHash()
    {
        var player = RoguemojiGame.Instance.LocalPlayer;
        var wieldedThing = player.WieldedThing;
        var cooldownHash = (wieldedThing != null && wieldedThing.IsOnCooldown) ? wieldedThing.CooldownProgressPercent : 0f;
        var statHash = HashCode.Combine(player.StatHash, wieldedThing?.StatHash ?? 0);
        var floaterHash = (wieldedThing != null && wieldedThing.HasFloaters) ? Game.Random.Int(0, 9999) : 0;
        return HashCode.Combine(wieldedThing?.NetworkIdent ?? 0, cooldownHash, statHash, player.HallucinatingSeed, floaterHash);
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        var player = RoguemojiGame.Instance.LocalPlayer;
        var wieldedThing = player.WieldedThing;
        Tooltip = "x";
    }

    protected override void OnMouseDown(MousePanelEvent e)
    {
        base.OnMouseDown(e);

        bool rightClick = e.Button == "mouseright";
        bool shift = Input.Down(InputButton.Run);

        var player = RoguemojiGame.Instance.LocalPlayer;
        if (player == null || player.WieldedThing == null)
            return;

        if(shift || rightClick)
            Hud.Instance.WieldingClicked(rightClick, shift);
        else
            Hud.Instance.StartDragging(player.WieldedThing, this, rightClick, PanelType.Wielding);

        Hud.Instance.UnfocusChatbox();
    }
}