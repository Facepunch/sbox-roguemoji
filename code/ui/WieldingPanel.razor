@using Sandbox;
@using Sandbox.UI;
@using System;

@inherits Panel;
@namespace Roguemoji

<style>
    .wielding
    {
        width: 70px;
        height: 70px;
        font-size: 48px;
        align-items: center;
        justify-content: center;
        border: 1px solid #ffffff05;
        border-radius: 3px;
        padding-bottom: 4px;
        pointer-events: all;
        margin-bottom: 10px;
    }

    .is_wielding_something
    {
        background-color: #5555ff11;
    }

    .not_wielding_anything
    {
        color: transparent;
        text-shadow: 0 0 0.01px #00000099;
    }

    .wielding_tattoo
    {
        width: 100%;
        height: 100%;
        position: absolute;
        //background-color: #0000ff88;
        justify-content: center;
        align-items: center;
    }
</style>

@{
    var player = RoguemojiGame.Instance.LocalPlayer;
    var wieldedThing = player.WieldedThing;
}

<root class="wielding @(wieldedThing != null ? "is_wielding_something" : "not_wielding_anything")"> 
    @if(wieldedThing == null)
    {
        <div>🖐️</div>
    }
    else
    {
        <div>@(wieldedThing.DisplayIcon.Substring(wieldedThing.CharSkip))</div>

        @if(wieldedThing.HasTattoo)
        {
            int fontSize = MathX.FloorToInt(48f * wieldedThing.TattooScale);
            var offset = wieldedThing.TattooOffset;
            <div class="wielding_tattoo" style="font-size: @(fontSize)px; left: @(offset.x + 2)px; top: @(offset.y + 2)px;">
                @(wieldedThing.TattooIcon)
            </div>
        }
    }
</root>

@code
{
    protected override Panel CreateTooltipPanel()
    {
        var panel = Hud.Instance.AddChild<WieldingTooltip>();
        var player = RoguemojiGame.Instance.LocalPlayer;
        panel.Thing = player.WieldedThing;
        return panel;
    }

    protected override int BuildHash()
    {
        var player = RoguemojiGame.Instance.LocalPlayer;
        return HashCode.Combine(player.WieldedThing?.NetworkIdent ?? 0);
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        var player = RoguemojiGame.Instance.LocalPlayer;
        var wieldedThing = player.WieldedThing;
        Tooltip = (wieldedThing != null) ? "x" : "";
    }

    protected override void OnMouseDown(MousePanelEvent e)
    {
        base.OnMouseDown(e);

        bool rightClick = e.Button == "mouseright";
        bool shift = Input.Down(InputButton.Run);

        var player = RoguemojiGame.Instance.LocalPlayer;
        if (player == null || player.WieldedThing == null)
            return;

        if(shift || rightClick)
            Hud.Instance.WieldingClicked(rightClick, shift);
        else
            Hud.Instance.StartDragging(player.WieldedThing, this, rightClick, PanelType.Wielding);
    }
}