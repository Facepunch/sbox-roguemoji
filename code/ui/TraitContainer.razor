@using System;
@using Sandbox;
@using Sandbox.UI;

@inherits Panel;
@namespace Roguemoji

<style>
    .trait_container
    {
        width: 43px;
        height: 43px;
        border: 1px solid #151515;
        border-radius: 3px;
        margin: 2px;
        background-color: #050505;
        padding: 2px;
    }

    .trait_icon
    {
        width: 100%;
        height: 100%;
        font-size: 28px;
        color: white;
        text-align: center;
        align-items: center;
        justify-content: center;
        padding: 0px;
        margin: 0px;
        overflow: hidden;
    }

    .trait_tattoo
    {
        width: 100%;
        height: 100%;
        padding: 2px;
        position: absolute;
        //background-color: #0000ff88;
        justify-content: center;
        align-items: center;
    }

    .trait_label
    {
        width: 100%;
        height: 100%;
        padding: 2px;
        position: absolute;
        justify-content: center;
        align-items: center;
        text-stroke-color: #000000;
        text-stroke-width: 4px;
    }
</style>

<root class="trait_container">
    @if(Trait == null)
    {
        return;
    }

    <div class="trait_icon"> 
        @($"{Trait.Icon}") 

        @if (Trait.HasTattoo)
        {
            int fontSize = MathX.FloorToInt(28f * Trait.TattooScale);
            var offset = Trait.TattooOffset;
            <div class="trait_tattoo" style="font-size: @(fontSize)px; left: @(offset.x)px; top: @(offset.y)px;">
                @Trait.TattooIcon
            </div>
        }

        @if (Trait.HasLabel)
        {
            var offset = Trait.LabelOffset;
            <div class="trait_label" style="font-size: @(Trait.LabelFontSize)px; left: @(offset.x)px; top: @(offset.y)px; color: @(Trait.LabelColor.Hex)">
                @Trait.LabelText
            </div>
        }
    </div>
</root>

@code
{
    public Trait Trait { get; set; }

    protected override int BuildHash()
    {
        // todo
        return HashCode.Combine(Trait?.Icon);
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (Trait == null)
            return;

        Tooltip = ".";
    }

    protected override Panel CreateTooltipPanel()
    {
        var panel = Hud.Instance.AddChild<TraitTooltip>();
        panel.Trait = Trait;
        return panel;
    }
}