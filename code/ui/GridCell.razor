@using Sandbox;
@using Sandbox.UI;
@using System;

@inherits Panel;
@namespace Interfacer

<style>
    .icon
    {
        width: 40px;
        height: 40px;
		justify-content: center;
        align-items: center;
        text-align: center;
        color:#ffffff;
        z-index: 1;
        position: absolute;
        pointer-events:all;
        font-size:29px;
    }

    .player-1 { text-stroke-color: #3333ff; text-stroke-width: 4px; }
    .player-2 { text-stroke-color: #ff0000; text-stroke-width: 4px; }
    .player-3 { text-stroke-color: #009900; text-stroke-width: 4px; }
    .player-4 { text-stroke-color: #ff00ff; text-stroke-width: 4px; }
    .player-5 { text-stroke-color: #ffff00; text-stroke-width: 4px; }
    .player-6 { text-stroke-color: #2299ff; text-stroke-width: 4px; }
    .player-7 { text-stroke-color: #444444; text-stroke-width: 4px; }
    .player-8 { text-stroke-color: #8800bb; text-stroke-width: 4px; }
</style>

<root class="icon @playerClass()">@Text</root>

@code
{
    public Panel IconPanel { get; set; }

    public int Index { get; set; }
    public int PlayerNum { get; set; }

    public string Text { get; private set; }

    public bool IsSelected { get; set; }

    public IntVector GetCoords()
    {
        return new IntVector(Index % InterfacerGame.GridWidth, MathX.FloorToInt((float)Index / (float)InterfacerGame.GridWidth));
    }

    private string selectedClass()
    {
        if (IsSelected)
            return "selected";
        else 
            return "";
    }

    private string playerClass()
    {
        return PlayerNum > 0 ? $"player-{PlayerNum}" : "";
    }

    public void SetSelected(bool isSelected)
    {
        IsSelected = isSelected;
        StateHasChanged();
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    public void SetText(string text)
    {
        Text = text;
    }

    public void SetPlayerNum(int num)
    {
        PlayerNum = num;
    }

    //public override void Tick()
    //{
    //    base.Tick();

    //    Style.Width = 40f + MathF.Sin(Time.Now * 4f) * 4f;
    //    Style.MarginLeft = 12f;
    //    Style.MarginTop = 12f;

    //    var tr = new PanelTransform();
    //    tr.AddScale(new Vector3(1f + MathF.Sin(Time.Now * 6f) * 0.05f, 1f + MathF.Sin(Time.Now * 7f) * 0.05f, 1f));
    //    tr.AddRotation(0f, 0f, MathF.Sin(Time.Now * 5f) * 4f);
    //    tr.AddTranslateY(MathF.Sin(Time.Now * 10f) * -2f);
    //    tr.AddRotation(MathF.Cos(Time.Now * 6f) * 25f, MathF.Sin(Time.Now * 6f) * 25f, 0f);
    //    Style.Transform = tr;
    //}
}