@using Sandbox;
@using Sandbox.UI;
@using System;

@inherits Panel;
@namespace Interfacer

<style>
    .icon
    {
        width: 40px;
        height: 40px;
		justify-content: center;
        align-items: center;
        text-align: center;
        //color:#ffffff;
        position: absolute;
        pointer-events:all;
        font-size: 29px;
        //color: transparent;  
        //text-shadow: 0 0 0.01px #ff0000;
        //filter: contrast(0.5);
        //filter: contrast(100);
        //filter: blur(5px);
    }

    .player-1 { text-stroke-color: #3333ff; text-stroke-width: 4px; }
    .player-2 { text-stroke-color: #ff0000; text-stroke-width: 4px; }
    .player-3 { text-stroke-color: #009900; text-stroke-width: 4px; }
    .player-4 { text-stroke-color: #ff00ff; text-stroke-width: 4px; }
    .player-5 { text-stroke-color: #ffff00; text-stroke-width: 4px; }
    .player-6 { text-stroke-color: #2299ff; text-stroke-width: 4px; }
    .player-7 { text-stroke-color: #8800bb; text-stroke-width: 4px; }
    .player-8 { text-stroke-color: #ff8800; text-stroke-width: 4px; }
</style>

<root class="icon @GetPlayerClass()" style="z-index: @(Index + Thing.IconDepth * 10);">@Thing.DisplayIcon</root>

@code
{
    public Panel IconPanel { get; set; }
    public CellTooltip TooltipPanel { get; set; }

    public Thing Thing { get; set; }
    public int Index { get; set; }

    private string GetPlayerClass()
    {
        return Thing.PlayerNum > 0 ? $"player-{Thing.PlayerNum}" : "";
    }

    protected override Panel CreateTooltipPanel()
    {
        TooltipPanel = Hud.Instance.AddChild<CellTooltip>();
        TooltipPanel.Text = Tooltip;
        TooltipPanel.AddClass($"player-{Thing.PlayerNum}");
        return TooltipPanel;
    }

    protected override int BuildHash()
    {
        if (Thing == null)
            return base.BuildHash();

        return HashCode.Combine( Thing.DisplayIcon, Thing.PlayerNum, Thing.Offset, Thing.RotationDegrees, Thing.IconScale, Thing.IconDepth );
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (Thing == null)
            return;

        Tooltip = Thing.Tooltip;
        SetTransform(Thing.Offset, Thing.RotationDegrees, Thing.IconScale);
    }

    public void SetTransform(Vector2 offset, float rotation, float scale)
    {
        var tr = new PanelTransform();
        tr.AddTranslate(offset.x, offset.y);
        tr.AddRotation(0f, 0f, rotation);
        tr.AddScale(scale);
        Style.Transform = tr;
    }
}