@using Sandbox;
@using Sandbox.UI;
@using System;

@inherits Panel;
@namespace Roguemoji

<style>
    .icon
    {
        width: 40px;
        height: 40px;
		justify-content: center;
        align-items: center;
        text-align: center;
        position: absolute;
        pointer-events:all;
        font-size: 29px;
        padding-bottom: 4px;
        border: 1px solid #00000000;
        //overflow: hidden;
        //flex-wrap:nowrap;
        //color: transparent;  
        //text-shadow: 0 0 0.01px #ff0000;
        //filter: contrast(0.5);
        //filter: contrast(100);
        //filter: blur(5px);
        //transform-origin: 0% 50%;
    }

    .image
    {
        //background-color: #0000ff88;
    }

    .wielded_thing 
    {
        width: 20px;
        height: 20px;
        position: absolute;
        left: 20px;
        top: 17px;
        font-size: 18px;
        pointer-events: none;
        //background-color: #ff000088;
    }

    .solid
    {
        text-shadow: 0px 0px 8px #000000;
    }
    
    .dragging
    {
        opacity: 0.2;
        transition: opacity 0.1s ease-in;
    }

    .wielded
    {
        background-color: #5555ff22;
        border-radius: 3px;
    }

    .grid_cell_tattoo
    {
        width: 100%;
        height: 100%;
        padding-top: 4px;
        position: absolute;
        //background-color: #0000ff88;
        justify-content: center;
        align-items: center;
    }

    .grid_cell_hpbar 
    {
        width: 100%;
        height: 3px;
        background-color: #000000aa;
        align-self: center;
        position: absolute;
        bottom: 0px;
        border-radius: 1px;
    }

    .grid_cell_hpbar_overlay 
    {
        height: 3px;
        bottom: 0px;
        border-radius: 1px;
        position: absolute;
        align-self: center;
        transform-origin: left;
    }
</style>

<root class="icon @GetWieldedClass() @GetSolidClass()" )>
    <div class="image @GetPlayerClass() @GetDraggingClass()" @ref=IconPanel> 
        @Thing.DisplayIcon.Substring(Thing.CharSkip) 

        @if(Thing.HasTattoo)
        {
            int fontSize = MathX.FloorToInt(29f * Thing.TattooScale);
            var offset = Thing.TattooOffset;
            <div class="grid_cell_tattoo" style="font-size: @(fontSize)px; left: @(offset.x + 1)px; top: @(offset.y + 1.1)px;">
                @Thing.TattooIcon
            </div>
        }

        @if(Thing.HasStat(StatType.Health))
        {
            int hp = Thing.GetStatClamped(StatType.Health);
            int hpMax = Thing.GetStatMax(StatType.Health);

            if(hp < hpMax && hp > 0)
            {
                var hpPercent = Math.Clamp((float)hp / (float)hpMax, 0f, 1f);
                var hpBarColor = Lerp3(new Color(0f, 0.9f, 0f), new Color(0.75f, 0.25f, 0f), new Color(1f, 0f, 0f), 1f - hpPercent);

                <div class="grid_cell_hpbar"></div>
                <div class="grid_cell_hpbar_overlay" style="width: @(hpPercent * 100f)%; background-color: @(hpBarColor.Hex);"></div>    
            }
        }
    </div>

    @if (Thing.WieldedThing != null)
    {
        <div class="wielded_thing"> 
            @Thing.WieldedThing.DisplayIcon.Substring(Thing.WieldedThing.CharSkip)

            @if (Thing.WieldedThing.HasTattoo)
            {
                int fontSize = MathX.FloorToInt(18f * Thing.WieldedThing.TattooScale);
                var offset = Thing.WieldedThing.TattooOffset;
                <div class="grid_cell_tattoo" style="font-size: @(fontSize)px; left: @(offset.x)px; top: @(offset.y + 1)px;">
                    @Thing.WieldedThing.TattooIcon
                </div>
            }
        </div>
    }
</root>

@code
{
    public Panel IconPanel { get; set; }

    public Thing Thing { get; set; }
    public int GridIndex { get; set; }

    string GetPlayerClass()     { return Thing.PlayerNum > 0 ? $"icon-player-{Thing.PlayerNum}" : ""; }
    string GetSolidClass()      { return Thing.Flags.HasFlag(ThingFlags.Solid) ? "solid" : ""; }
    string GetDraggingClass()   { return Thing == Hud.Instance.DraggedThing ? "dragging" : ""; }
    string GetWieldedClass()    { return IsWielded() ? "wielded" : ""; }
    bool IsWielded()            { return Thing == RoguemojiGame.Instance.LocalPlayer?.WieldedThing; }

    protected override Panel CreateTooltipPanel()
    {
        var panel = Hud.Instance.AddChild<CellTooltip>();
        panel.Text = Tooltip;
        panel.Thing = Thing;
        panel.AddClass($"player-{Thing.PlayerNum}");
        return panel;
    }

    protected override int BuildHash()
    {
        if (Thing == null)
            return base.BuildHash();

        return HashCode.Combine(Thing.GetHashCode(), IsWielded(), Thing.NetworkIdent, Thing.GetStatClamped(StatType.Health));
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (Thing == null)
            return;

        Tooltip = Thing.Tooltip;
        SetTransform(Thing.Offset * ScaleToScreen, Thing.RotationDegrees, Thing.IconScale);
        Style.ZIndex = GridIndex + Thing.GetZPos();
    }

    public void SetTransform(Vector2 offset, float rotation, float scale)
    {
        var tr = new PanelTransform();
        //tr.AddTranslate(offset.x, offset.y);
        tr.AddRotation(0f, 0f, rotation);
        tr.AddScale(scale);
        IconPanel.Style.Transform = tr;
    }

    protected override void OnMouseDown(MousePanelEvent e)
    {
        base.OnMouseDown(e);

        bool shift = Input.Down(InputButton.Run);
        bool rightClick = e.Button == "mouseright";

        if(Thing.ContainingGridManager.GridType == GridType.Arena)
        {
            var player = RoguemojiGame.Instance.LocalPlayer;
            var gridPos = Thing.GridPos;
            bool visible = player.IsCellVisible(gridPos);

            if(player.IsAiming && player.AimingCells.Contains(gridPos) && visible)
                RoguemojiGame.ConfirmAimingCmd(gridPos.x, gridPos.y);
            else 
                Hud.Instance.GridCellClicked(Thing.GridPos, GridType.Arena, rightClick, shift, doubleClick: false, visible);
        }
        else if(Thing.ContainingGridManager.GridType == GridType.Inventory)
        {
            if(shift || rightClick)
                Hud.Instance.GridCellClicked(Thing.GridPos, GridType.Inventory, rightClick, shift, doubleClick: false);
            else
                Hud.Instance.StartDragging(Thing, this, rightClick, PanelType.InventoryGrid);
        }
        else if(Thing.ContainingGridManager.GridType == GridType.Equipment)
        {
            if(shift || rightClick)
                Hud.Instance.GridCellClicked(Thing.GridPos, GridType.Equipment, rightClick, shift, doubleClick: false);
            else
                Hud.Instance.StartDragging(Thing, this, rightClick, PanelType.EquipmentGrid);
        }

        e.StopPropagation();
    }

    protected override void OnDoubleClick(MousePanelEvent e)
    {
        base.OnDoubleClick(e);

        bool shift = Input.Down(InputButton.Run);
        bool rightClick = e.Button == "mouseright";

        if (Thing.ContainingGridManager.GridType == GridType.Inventory)
        {
            Hud.Instance.GridCellClicked(Thing.GridPos, GridType.Inventory, rightClick, shift, doubleClick: true);
        }

        e.StopPropagation();
        Hud.Instance.StopDragging();
    }

    Color Lerp3(Color a, Color b, Color c, float t)
    {
        if (t < 0.5f) // 0.0 to 0.5 goes to a -> b
            return Color.Lerp(a, b, t / 0.5f);
        else // 0.5 to 1.0 goes to b -> c
            return Color.Lerp(b, c, (t - 0.5f) / 0.5f);
    }
}