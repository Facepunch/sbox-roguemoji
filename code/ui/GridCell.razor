@using Sandbox;
@using Sandbox.UI;
@using System;

@inherits Panel;
@namespace Roguemoji

<style>
    .icon {
        width: 42px;
        height: 42px;
		justify-content: center;
        align-items: center;
        text-align: center;
        position: absolute;
        pointer-events:all;
        font-size: 29px;
        padding-bottom: 4px;
        border: 1px solid #00000000;
        //overflow: hidden;
        //flex-wrap:nowrap;
        //color: transparent;  
        //text-shadow: 0 0 0.01px #ff0000;
        //filter: contrast(0.5);
        //filter: contrast(100);
        //filter: blur(5px);
        //transform-origin: 0% 50%;
        font-family: W10Emoji;
    }

    .is_in_inventory {
        //transition: text-shadow 0.3s linear;
    }

    .wielded_thing {
        width: 21px;
        height: 21px;
        position: absolute;
        pointer-events: none;
        //background-color: #ff000088;
        //justify-content: center;
        //align-items: center;
        //text-align: center;
        text-stroke-color: #000000;
        text-stroke-width: 2px;
        text-shadow: 0px 0px 0px #000000;
    }

    .cell_icon_cooldown {
        color: #ffffff99;
    }

    .wielded {
        background-color: #5555ff22;
        border-radius: 3px;
    }

    .icon_equipment {
        text-stroke-color: #555555;
        text-stroke-width: 4px;
    }

    .grid_cell_tattoo {
        width: 100%;
        height: 100%;
        position: absolute;
        justify-content: center;
        align-items: center;
        text-stroke-color: #000000;
        text-stroke-width: 2px;
    }

    .grid_cell_stat_bar {
        width: 100%;
        height: 2px;
        background-color: #000000bb;
        align-self: center;
        position: absolute;
        bottom: 0px;
        border-radius: 1px;
    }

    .grid_cell_stat_bar_overlay {
        height: 2px;
        bottom: 0px;
        border-radius: 1px;
        position: absolute;
        align-self: center;
        transform-origin: left;
    }

    .grid_cell_cooldown_overlay {
        position: absolute;
        width: 100%;
        background-color: #000000cc;
        bottom: -2px;
        transform-origin: bottom;
        border-radius: 3px;
    }

    .grid_cell_cooldown_text {
        font-size: 14px;
        color: #aaaaaa;
        text-stroke-color: #00000088;
        text-stroke-width: 6px;
        position: absolute;
        justify-content: center;
        align-items: center;
        text-align: center;
        font-family: RobotoMono;
    }
</style>

<root class="icon @GetWieldedClass() @GetSolidClass()">
    @{
        var player = RoguemojiGame.Instance.LocalPlayer;
    }

    <div class="@GetPlayerClass() @GetCooldownClass(Thing) @Hud.GetUnusableClass(Thing) @GetInventoryClass() @Hud.Instance.GetEquipmentHighlightClass(Thing)" style="opacity:@(GetOpacity());" @ref=IconPanel>
        @if(player.CanSeeThing(Thing)) 
        {
            @(Hud.GetHallucinationTextThing(Thing, Thing.DisplayIcon.Substring(Thing.CharSkip), HallucinationTextType.Icon))

            @if(Thing.HasTattoo)
            {
                int fontSize = MathX.FloorToInt(29f * Thing.TattooData.Scale);
                var offset = Thing.TattooData.Offset;
                <div class="grid_cell_tattoo" style="font-size: @(fontSize)px; left: @(offset.x)px; top: @(offset.y)px;">
                    @(Hud.GetHallucinationTextThing(Thing, Hud.GetTattooIcon(Thing), HallucinationTextType.Icon, tattoo: true))
                </div>
            }

            @if(Thing.HasStat(StatType.Health))
            {
                int hp = Thing.GetStatClamped(StatType.Health);
                int hpMax = Thing.GetStatMax(StatType.Health);

                if(hp < hpMax && hp > 0)
                {
                    var hpPercent = Math.Clamp((float)hp / (float)hpMax, 0f, 1f);
                    //var hpBarColor = Lerp3(new Color(0f, 0.9f, 0f), new Color(0.75f, 0.25f, 0f), new Color(1f, 0f, 0f), 1f - hpPercent);

                    <div class="grid_cell_stat_bar"></div>
                    <div class="grid_cell_stat_bar_overlay" style="width: @(hpPercent * 100f)%; background-color: @(Thing.GetStatColor(StatType.Health));"></div>
                }
            }
        }

        @if (Thing.HasStat(StatType.Durability) && Thing.ContainingGridType != GridType.Arena)
        {
            int durability = Thing.GetStatClamped(StatType.Durability);
            int durabilityMax = Thing.GetStatMax(StatType.Durability);

            if (durability < durabilityMax && durability > 0)
            {
                var durabilityPercent = Math.Clamp((float)durability / (float)durabilityMax, 0f, 1f);

                <div class="grid_cell_stat_bar"></div>
                <div class="grid_cell_stat_bar_overlay" style="width: @(durabilityPercent * 100f)%; background-color: @(Thing.GetStatColor(StatType.Durability));"></div>
            }
        }
    </div>

    @if (Thing.WieldedThing != null)
    {
        var wieldedThing = Thing.WieldedThing;
        var wieldedOffset = Thing.WieldedThingOffset;

        if(player.CanSeeThing(wieldedThing))
        {
            <div class="wielded_thing @GetCooldownClass(wieldedThing)" style="left:@(wieldedOffset.x)px; top:@(wieldedOffset.y)px; font-size:@(Thing.WieldedThingFontSize); opacity:@(GetOpacityWielded());">
                @(Hud.GetHallucinationTextThing(wieldedThing, wieldedThing.DisplayIcon.Substring(wieldedThing.CharSkip), HallucinationTextType.Icon))

                @if (wieldedThing.HasTattoo)
                {
                    int fontSize = MathX.FloorToInt(18f * wieldedThing.TattooData.Scale);
                    var offset = wieldedThing.TattooData.OffsetWielded;
                    <div class="grid_cell_tattoo" style="font-size: @(fontSize)px; left: @(offset.x)px; top: @(offset.y)px;">
                        @(Hud.GetHallucinationTextThing(wieldedThing, Hud.GetTattooIcon(wieldedThing), HallucinationTextType.Icon, tattoo: true))
                    </div>
                }
            </div>
        }
    }

    @if (Thing.IsOnCooldown && Thing.ContainingGridType != GridType.Arena)
    {
        var cooldownTimer = (Thing.CooldownTimer < 9.8f ? Thing.CooldownTimer : MathF.Ceiling(Thing.CooldownTimer));

        <div class="grid_cell_cooldown_overlay" style="height: @((1f - Utils.EasePercent(Thing.CooldownProgressPercent, EasingType.SineIn)) * 100f)%;"></div>
        <div class="grid_cell_cooldown_text"> @(cooldownTimer.ToString(cooldownTimer < 9.8f ? "N1" : "N0")) </div>
    }
</root>

@code
{
    public Panel IconPanel { get; set; }

    public Thing Thing { get; set; }
    public int GridIndex { get; set; }

    string GetPlayerClass()     { return Thing.PlayerNum > 0 ? $"icon-player-{Thing.PlayerNum}" : ""; }
    string GetSolidClass()      { return Thing.HasFlag(ThingFlags.Solid) ? "solid" : ""; }
    string GetWieldedClass()    { return IsWielded() ? "wielded" : ""; }
    bool IsWielded()            { return Thing == RoguemojiGame.Instance.LocalPlayer?.WieldedThing; }
    string GetEquipmentClass()  { return Thing.HasFlag(ThingFlags.Equipment) ? "icon_equipment" : ""; }
    string GetInventoryClass()  { return Thing.ContainingGridType == GridType.Inventory ? "is_in_inventory" : ""; }
    string GetCooldownClass(Thing thing)    { return thing.IsOnCooldown && thing.ContainingGridType != GridType.Arena ? "cell_icon_cooldown" : ""; }

    float GetOpacity()          { return Thing.Opacity * (Thing.GetStatClamped(StatType.Invisible) > 0 ? 0.25f : 1f) * (Thing == Hud.Instance.DraggedThing ? 0.2f : 1f); }
    float GetOpacityWielded()   { return Thing.WieldedThing.Opacity * (Thing.WieldedThing.GetStatClamped(StatType.Invisible) > 0 ? 0.25f : 1f); }

    protected override Panel CreateTooltipPanel()
    {
        var panel = Hud.Instance.AddChild<CellTooltip>();
        panel.Thing = Thing;
        panel.AddClass($"tooltip_player-{Thing.PlayerNum}");
        return panel;
    }

    protected override int BuildHash()
    {
        if (Thing == null)
            return base.BuildHash();

        var player = RoguemojiGame.Instance.LocalPlayer;
        var cooldownHash = Thing.IsOnCooldown ? Thing.CooldownProgressPercent : 0f;
        var wieldedThing = Thing.WieldedThing;
        var wieldedCooldownHash = wieldedThing != null && wieldedThing.IsOnCooldown ? wieldedThing.CooldownProgressPercent : 0f;
        var equipmentHighlightHash = Hud.Instance.GetContainingPanelType(Hud.Instance.MousePosition) == PanelType.EquipmentGrid ? 1 : 0;
        var statHash = HashCode.Combine(player.StatHash, Thing.StatHash);
        var identifiedHash = HashCode.Combine(Thing is Scroll scroll && player.IsScrollTypeIdentified(scroll.ScrollType) ? 1 : 0, Thing is Potion potion && player.IsPotionTypeIdentified(potion.PotionType) ? 1 : 0);
        return HashCode.Combine(Thing.GetHashCode(), IsWielded(), Thing.NetworkIdent, HashCode.Combine(cooldownHash, wieldedCooldownHash, equipmentHighlightHash, statHash, identifiedHash), player.ConfusionSeed, player.HallucinatingSeed);
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (Thing == null)
            return;

        Tooltip = Thing.Tooltip;
        //SetTransform(Thing.Offset * ScaleToScreen, Thing.RotationDegrees, Thing.IconScale);
        SetTransform(Vector2.Zero, Thing.RotationDegrees, Thing.IconScale);
        Style.ZIndex = GridIndex + Thing.GetZPos();
    }

    public void SetTransform(Vector2 offset, float rotation, float scale)
    {
        var tr = new PanelTransform();
        //tr.AddTranslate(offset.x, offset.y);
        tr.AddRotation(0f, 0f, rotation);
        tr.AddScale(scale);
        IconPanel.Style.Transform = tr;
    }

    protected override void OnMouseDown(MousePanelEvent e)
    {
        base.OnMouseDown(e);

        bool shift = Input.Down(InputButton.Run);
        bool rightClick = e.Button == "mouseright";

        if (Thing.ContainingGridType == GridType.Arena)
        {
            var player = RoguemojiGame.Instance.LocalPlayer;
            var gridPos = Thing.GridPos;
            bool visible = player.IsCellVisible(gridPos);

            if(player.IsAiming && player.AimingCells.Contains(gridPos) && visible)
                RoguemojiGame.ConfirmAimingCmd(gridPos.x, gridPos.y);
            else 
                Hud.Instance.GridCellClicked(Thing.GridPos, GridType.Arena, rightClick, shift, doubleClick: false, visible);
        }
        else if (Thing.ContainingGridType == GridType.Inventory)
        {
            if(shift || rightClick)
                Hud.Instance.GridCellClicked(Thing.GridPos, GridType.Inventory, rightClick, shift, doubleClick: false);
            else
                Hud.Instance.StartDragging(Thing, this, rightClick, PanelType.InventoryGrid);
        }
        else if (Thing.ContainingGridType == GridType.Equipment)
        {
            if(shift || rightClick)
                Hud.Instance.GridCellClicked(Thing.GridPos, GridType.Equipment, rightClick, shift, doubleClick: false);
            else
                Hud.Instance.StartDragging(Thing, this, rightClick, PanelType.EquipmentGrid);
        }

        e.StopPropagation();

        Hud.Instance.UnfocusChatbox();
    }

    protected override void OnDoubleClick(MousePanelEvent e)
    {
        base.OnDoubleClick(e);

        bool shift = Input.Down(InputButton.Run);
        bool rightClick = e.Button == "mouseright";

        if (Thing.ContainingGridType == GridType.Inventory)
        {
            Hud.Instance.GridCellClicked(Thing.GridPos, GridType.Inventory, rightClick, shift, doubleClick: true);
        }

        e.StopPropagation();
        Hud.Instance.StopDragging();
    }

    Color Lerp3(Color a, Color b, Color c, float t)
    {
        if (t < 0.5f) // 0.0 to 0.5 goes to a -> b
            return Color.Lerp(a, b, t / 0.5f);
        else // 0.5 to 1.0 goes to b -> c
            return Color.Lerp(b, c, (t - 0.5f) / 0.5f);
    }
}