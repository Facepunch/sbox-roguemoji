@using Sandbox;
@using Sandbox.UI;
@using System;

@inherits Panel;
@namespace Interfacer

<style>
    .icon
    {
        width: 40px;
        height: 40px;
		justify-content: center;
        align-items: center;
        text-align: center;
        position: absolute;
        pointer-events:all;
        font-size: 29px;
        padding-bottom: 4px;
        border: 1px solid #00000000;
        //color: transparent;  
        //text-shadow: 0 0 0.01px #ff0000;
        //filter: contrast(0.5);
        //filter: contrast(100);
        //filter: blur(5px);
        //transform-origin: 0% 50%;
    }

    .selected 
    {
        border: 1px solid #bbbbff44;
        border-radius:3px;
        //filter: brightness(2);
        //filter: brightness(0.3);
        //filter: contrast(3);
        //text-shadow: 0px 0px 8px #000000;
        //text-decoration: overline underline 4px black wavy;
        //text-decoration-skip-ink: none;
    }

    .solid
    {
        text-shadow: 0px 0px 2px #000000;
    }

    .player-1 { text-stroke-color: #3333ff; text-stroke-width: 4px; }
    .player-2 { text-stroke-color: #ff0000; text-stroke-width: 4px; }
    .player-3 { text-stroke-color: #009900; text-stroke-width: 4px; }
    .player-4 { text-stroke-color: #ff00ff; text-stroke-width: 4px; }
    .player-5 { text-stroke-color: #ffff00; text-stroke-width: 4px; }
    .player-6 { text-stroke-color: #2299ff; text-stroke-width: 4px; }
    .player-7 { text-stroke-color: #8800bb; text-stroke-width: 4px; }
    .player-8 { text-stroke-color: #ff8800; text-stroke-width: 4px; }
</style>

<root class="icon @GetSelectedClass()">
    <div class="@GetPlayerClass() @GetSolidClass()" @ref=IconPanel>@Thing.DisplayIcon</div>
</root>

@code
{
    public Panel IconPanel { get; set; }

    public Thing Thing { get; set; }
    public int GridIndex { get; set; }

    string GetPlayerClass()
    {
        return Thing.PlayerNum > 0 ? $"player-{Thing.PlayerNum}" : "";
    }

    string GetSelectedClass()
    {
        return IsSelected() ? "selected" : "";
    }

    string GetSolidClass()
    {
        return Thing.Flags.HasFlag(ThingFlags.Solid) ? "solid" : "";
    }

    bool IsSelected()
    {
        var isSelected = Thing == InterfacerGame.Instance.LocalPlayer?.SelectedThing;
        if(isSelected)
        {
            //Log.Info("selected: " + GridIndex + ", " + Thing.DisplayName + " -- " + Time.Now);


        }

        return Thing == InterfacerGame.Instance.LocalPlayer?.SelectedThing;
    }

    protected override Panel CreateTooltipPanel()
    {
        var panel = Hud.Instance.AddChild<CellTooltip>();
        panel.Text = Tooltip;
        panel.AddClass($"player-{Thing.PlayerNum}");
        return panel;
    }

    protected override int BuildHash()
    {
        if (Thing == null)
            return base.BuildHash();

        return HashCode.Combine( Thing.GetHashCode(), IsSelected(), Thing.NetworkIdent );
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (Thing == null)
            return;

        Tooltip = Thing.Tooltip;
        SetTransform(Thing.Offset, Thing.RotationDegrees, Thing.IconScale);
        Style.ZIndex = GridIndex + Thing.IconDepth;
    }

    public void SetTransform(Vector2 offset, float rotation, float scale)
    {
        var tr = new PanelTransform();
        tr.AddTranslate(offset.x, offset.y);
        tr.AddRotation(0f, 0f, rotation);
        tr.AddScale(scale);
        IconPanel.Style.Transform = tr;
    }
}