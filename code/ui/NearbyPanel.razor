@using System;
@using Sandbox;
@using Sandbox.UI;
@using System.Collections.Generic;
@using System.Linq;

@inherits Panel;
@namespace Roguemoji

<style>
    .nearby
    {
        flex-direction:column;
        align-items:center;
        overflow: scroll;
        //background-color: #070707;
    }

    .nearby_bg
    {
        pointer-events: all;
        width:100%;
        height:100%;
        position:absolute;
    }
</style>

<root class="nearby" style="background-color:@(Player.ContainingGridManager.GetNearbyBgColor(Player.GridPos));">
    <div class="nearby_bg"></div> 

    @{
        RoguemojiPlayer player = Player;
    }

    @if (player?.ContainingGridManager?.GetThingsAtClient(player.GridPos) == null)
    {
        return;
    }

    @if(FlickerFrames < 1)
    {
        return;
    }

    @foreach (var thing in GetThings(player))
    {
        <NearbyCell Thing=@thing>
            @if(thing.HasFloaters)
            {
                <FloaterDisplayNearby Thing=@thing></FloaterDisplayNearby>
            }
        </NearbyCell>
    }
</root>

@code
{
    public RoguemojiPlayer Player => RoguemojiGame.Instance.LocalPlayer;

    public int FlickerFrames { get; set; }
    Vector2 _scrollOffset;

    IEnumerable<Thing> GetThings(RoguemojiPlayer player)
    {
        return player.ContainingGridManager.GetThingsAtClient(player.GridPos).WithAll(ThingFlags.CanBePickedUp).WithNone(ThingFlags.Solid).OrderByDescending(x => x.GetZPos());
    }

    public override void Tick()
    {
        base.Tick();

        FlickerFrames++;
        if (FlickerFrames == 1 || FlickerFrames == 2)
            ScrollOffset = _scrollOffset;

        if (FlickerFrames == 1)
            StateHasChanged();
    }

    protected override int BuildHash()
    {
        var player = RoguemojiGame.Instance.LocalPlayer;
        if (player == null)
            return 0;

        var things = GetThings(player).ToList();

        if(things.Count < 5)
        {
            Style.Overflow = OverflowMode.Hidden;
            ScrollOffset = Vector2.Zero;
        }
        else
        {
            Style.Overflow = OverflowMode.Scroll;
        }

        var floaterHash = 0;
        foreach(var thing in things)
        {
            if(thing.HasFloaters)
            {
                floaterHash = Game.Random.Int(0, 9999);
                break;
            }
        }

        return HashCode.Combine(player.GridPos, things.Count, player.InventoryGridManager.Things.Count, floaterHash);
    }

    public void FlickerCells()
    {
        _scrollOffset = ScrollOffset;
        FlickerFrames = 0;
    }
}