@using System;
@using Sandbox;
@using Sandbox.UI;

@inherits Panel;
@namespace Roguemoji

<style>
    .info {
        flex-direction: row;
        align-items:center;
        justify-content:flex-start;
        border: 1px solid #303030;
        //flex-basis: content;
        //flex-grow: 1;
        //flex-shrink: 1;
    }

    .selected_info {
        flex-shrink: 0;
        padding: 10px;
        flex-direction: column;
        align-items: center;
        margin: 0 20px 0 20px;
    }

    .icon {
        //width: 82px;
        //height: 82px;
        margin: 0 0 10px 0;
        font-size: 55px;
        //background-color: #ff000066;
    }

    .info_wielded {
        width: 40px;
        height: 40px;
        position: absolute;
        left: 38px;
        top: 38px;
        font-size: 32px;
        pointer-events: none;
        text-stroke-color: #00000000;
        text-stroke-width: 0px;
    }

    .name_label {
        margin: 0 0 1px 0;
        font-size: 20px;
        color: #ffffff77;
        text-align: center;
    }

    .equipment_label {
        font-size: 18px;
        color: #44554433;
    }

    .info_description_label {
        font-size: 16px;
        color: #ffffff55;
        font-style: italic;
        flex-wrap: wrap;
        text-align: left;
        max-width: 180px;
        max-height: 80px;
        overflow: hidden;
        background-color: #030303;
        border-radius: 3px;
        padding: 8px;
    }

    .thing_selected {
        border: 1px solid #bbbbff44;
    }

    .debug {
        color: #44554499;
        font-size: 12px;
    }

    .info_panel_tattoo {
        position: absolute;
        //background-color: #0000ff88;
        justify-content: center;
        align-items: center;
    }
</style>

<root class="info @GetSelectedClass()">
    @if(SelectedThing == null)
    {
        return;
    }

     <div class="selected_info">
        <div class="name_label"> @SelectedThing.DisplayName </div>

        @if (SelectedThing.Flags.HasFlag(ThingFlags.Equipment)) { <div class="equipment_label"> Accessory </div> }

        <div class="icon @GetPlayerClass()">
            @SelectedThing.DisplayIcon

            @if (SelectedThing.HasTattoo)
            {
                int fontSize = MathX.FloorToInt(55f * SelectedThing.TattooScale);
                var offset = SelectedThing.TattooOffset;
                <div class="info_panel_tattoo" style="width: 64px; height: 64px; font-size: @(fontSize)px; left: @(offset.x + 8)px; top: @(offset.y + 7)px;">
                    @SelectedThing.TattooIcon
                </div>
            }

            @if (SelectedThing.WieldedThing != null) {
                <div class="info_wielded">
                    @SelectedThing.WieldedThing.DisplayIcon.Substring(SelectedThing.WieldedThing.CharSkip)

                    @if (SelectedThing.WieldedThing.HasTattoo)
                    {
                        int fontSize = MathX.FloorToInt(32f * SelectedThing.WieldedThing.TattooScale);
                        var offset = SelectedThing.WieldedThing.TattooOffset;
                        <div class="info_panel_tattoo" style="width: 40px; height: 40px; font-size: @(fontSize)px; left: @(offset.x + 2)px; top: @(offset.y + 2)px;">
                            @SelectedThing.WieldedThing.TattooIcon
                        </div>
                    }
                </div> 
            }
        </div>

        @if (!string.IsNullOrEmpty(SelectedThing.Description)) { <div class="info_description_label"> @SelectedThing.Description </div> }
    </div>

    @if (SelectedThing.HasStats) { <StatsDisplay Thing=@SelectedThing></StatsDisplay>     }
    @if (SelectedThing.Traits != null && SelectedThing.Traits.Count > 0) { <TraitsDisplay Thing=@SelectedThing></TraitsDisplay>     }
</root>

@code
{
    public Thing SelectedThing { get; set; }

    string GetSelectedClass()
    {
        return SelectedThing != null ? "thing_selected" : "";
    }

    string GetPlayerClass()
    {
        return SelectedThing.PlayerNum > 0 ? $"icon-player-{SelectedThing.PlayerNum}" : "";
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(SelectedThing?.GetInfoDisplayHash() ?? 0);
    }
}