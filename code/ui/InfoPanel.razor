@using System;
@using Sandbox;
@using Sandbox.UI;

@inherits Panel;
@namespace Roguemoji

<style>
    .info {
        flex-direction: row;
        align-items:center;
        justify-content:flex-start;
        border: 1px solid #303030;
        //flex-basis: content;
        //flex-grow: 1;
        //flex-shrink: 1;
    }

    .selected_info {
        flex-shrink: 0;
        padding: 10px;
        flex-direction: column;
        align-items: center;
        margin: 0 20px 0 20px;
    }

    .icon {
        //width: 82px;
        //height: 82px;
        margin: 0 0 10px 0;
        font-size: 55px;
        //background-color: #ff000066;
        font-family: W10Emoji;
    }

    .info_wielded {
        width: 42px;
        height: 42px;
        position: absolute;
        pointer-events: none;
        text-stroke-color: #000000;
        text-stroke-width: 2px;
        text-shadow: 0px 0px 0px #000000;
    }

    .name_label {
        margin: 0 0 -3px 0;
        font-size: 20px;
        color: #888888;
        text-align: center;
    }

    .equipment_label {
        font-size: 15px;
        color: #ee99ff88;
    }

    .info_description_label {
        font-size: 14px;
        color: #555555;
        font-style: italic;
        flex-wrap: wrap;
        text-align: left;
        max-width: 180px;
        max-height: 84px;
        overflow: hidden;
        background-color: #030303;
        border-radius: 3px;
        padding: 8px;
    }

    .thing_selected {
        border: 1px solid #bbbbff44;
    }

    .debug {
        color: #44554499;
        font-size: 12px;
    }

    .info_panel_tattoo {
        position: absolute;
        //background-color: #0000ff88;
        justify-content: center;
        align-items: center;
        text-stroke-color: #000000;
        text-stroke-width: 2px;
    }
</style>

<root class="info @GetSelectedClass()">
    @if(SelectedThing == null)
    {
        return;
    }

     <div class="selected_info">
        <div class="name_label"> 
            @(Hud.GetConfusedText(Hud.GetHallucinationTextThing(SelectedThing, GetName(SelectedThing), HallucinationTextType.Name)))
        </div>

        @if (SelectedThing.HasFlag(ThingFlags.Equipment))
        { 
            <div class="equipment_label">
                @(Hud.GetConfusedText("Accessory"))
            </div> 
        }

        <div class="icon @GetPlayerClass() @Hud.GetUnusableClass(SelectedThing)">
            @(Hud.GetHallucinationTextThing(SelectedThing, SelectedThing.DisplayIcon, HallucinationTextType.Icon))

            @if (SelectedThing.HasTattoo)
            {
                int fontSize = MathX.FloorToInt(55f * SelectedThing.TattooData.Scale);
                var offset = SelectedThing.TattooData.OffsetInfo;
                <div class="info_panel_tattoo" style="width: 64px; height: 64px; font-size: @(fontSize)px; left: @(offset.x)px; top: @(offset.y)px;">
                    @(Hud.GetHallucinationTextThing(SelectedThing, Hud.GetTattooIcon(SelectedThing), HallucinationTextType.Icon, tattoo: true))
                </div>
            }

            @if (SelectedThing.WieldedThing != null) {
                var wieldedThing = SelectedThing.WieldedThing;
                var wieldedOffset = SelectedThing.InfoWieldedThingOffset;
                <div class="info_wielded" style="left:@(wieldedOffset.x)px; top:@(wieldedOffset.y)px; font-size:@(SelectedThing.InfoWieldedThingFontSize);">
                    @(Hud.GetHallucinationTextThing(wieldedThing, wieldedThing.DisplayIcon.Substring(wieldedThing.CharSkip), HallucinationTextType.Icon))

                    @if (wieldedThing.HasTattoo)
                    {
                        int fontSize = MathX.FloorToInt(32f * wieldedThing.TattooData.Scale);
                        var offset = wieldedThing.TattooData.OffsetInfoWielded;
                        <div class="info_panel_tattoo" style="width: @(RoguemojiGame.CellSize)px; height: @(RoguemojiGame.CellSize)px; font-size: @(fontSize)px; left: @(offset.x)px; top: @(offset.y)px;">
                            @(Hud.GetHallucinationTextThing(wieldedThing, Hud.GetTattooIcon(wieldedThing), HallucinationTextType.Icon, tattoo: true))
                        </div>
                    }
                </div> 
            }
        </div>

        @if (!string.IsNullOrEmpty(SelectedThing.Description)) 
        { 
            <div class="info_description_label">
                @(Hud.GetConfusedText(Hud.GetHallucinationTextThing(SelectedThing, GetDescription(SelectedThing), HallucinationTextType.Description)))
            </div>
        }
    </div>

    @if (SelectedThing.ShouldShowInfoStats())
    { 
        <StatsDisplay Thing=@SelectedThing></StatsDisplay>     
    }

    @if (SelectedThing.Traits != null && SelectedThing.Traits.Count > 0) 
    { 
        <TraitsDisplay Thing=@SelectedThing></TraitsDisplay> 
    }
</root>

@code
{
    public Thing SelectedThing { get; set; }

    string GetSelectedClass()
    {
        return SelectedThing != null ? "thing_selected" : "";
    }

    string GetPlayerClass()
    {
        return SelectedThing.PlayerNum > 0 ? $"icon-player-{SelectedThing.PlayerNum}" : "";
    }

    string GetName(Thing thing)
    {
        var player = RoguemojiGame.Instance.LocalPlayer;

        var str = thing.DisplayName;

        if (thing is Scroll scroll)
        {
            if (!player.IsScrollTypeIdentified(scroll.ScrollType))
                str = $"Scroll of {RoguemojiGame.Instance.GetUnidentifiedScrollName(scroll.ScrollType)}";
        }
        else if (thing is Potion potion)
        {
            if (!player.IsPotionTypeIdentified(potion.PotionType))
                str = $"{RoguemojiGame.Instance.GetUnidentifiedPotionName(potion.PotionType).FirstCharToUpper()} Potion";
        }

        return str;
    }

    string GetDescription(Thing thing)
    {
        var player = RoguemojiGame.Instance.LocalPlayer;

        var str = thing.Description;

        if (thing is Scroll scroll)
        {
            if (!player.IsScrollTypeIdentified(scroll.ScrollType))
                str = $"An unidentified scroll";
        }
        else if (thing is Potion potion)
        {
            if (!player.IsPotionTypeIdentified(potion.PotionType))
                str = $"An unidentified potion";
        }

        return str;
    }

    protected override int BuildHash()
    {
        var player = RoguemojiGame.Instance.LocalPlayer;
        var floaterHash = SelectedThing.HasFloaters ? Game.Random.Int(0, 9999) : 0;
        return HashCode.Combine(SelectedThing?.GetInfoDisplayHash() ?? 0, player.ControlledThing.StatHash, player.ConfusionSeed, player.HallucinatingSeed, SelectedThing.StatHash, SelectedThing.TraitHash, floaterHash);
    }
}