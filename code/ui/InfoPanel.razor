@using System;
@using Sandbox;
@using Sandbox.UI;

@inherits Panel;
@namespace Roguemoji

<style>
    .info
    {
        flex-direction: row;
        align-items:center;
        justify-content:flex-start;
        border: 1px solid #ffffff05;
        //flex-basis: content;
        //flex-grow: 1;
        //flex-shrink: 1;
    }

    .column
    {
        flex-direction:column;       
        align-items: center;
    }

    .selected_info {
        flex-shrink: 0;
        padding: 10px;
        flex-direction: column;
        align-items: center;
        margin: 0 20px 0 20px;
    }

    .row
    {
        flex-direction:row;       
        align-items: center;
    }

    .icon
    {
        margin: 0 0 5px 0;
        font-size: 55px;
    }

    .equipped {
        width: 40px;
        height: 40px;
        position: absolute;
        left: 25px;
        top: 25px;
        font-size: 32px;
        pointer-events: none;
        text-stroke-color: #00000000;
        text-stroke-width: 0px;
    }

    .name_label {
        margin: 0 0 5px 0;
        font-size: 22px;
        color: #ffffff77;
    }

    .equipment_label {
        //margin: 0 0 5px 0;
        font-size: 20px;
        color: #44554477;
        font-style: italic;
    }

    .thing_selected {
        border: 1px solid #bbbbff44;
    }

    .debug {
        color: #44554499;
        font-size: 12px;
    }
</style>

<root class="info @GetSelectedClass()">
    @if(SelectedThing == null)
    {
        return;
    }

     <div class="selected_info">
        <div class="name_label"> @SelectedThing.DisplayName </div>

        <div class="icon @GetPlayerClass()">
            @SelectedThing.DisplayIcon

            @if (SelectedThing.WieldedThing != null)
            {
                <div class="equipped"> @SelectedThing.WieldedThing.DisplayIcon.Substring(SelectedThing.WieldedThing.CharSkip) </div>
            }
        </div>

        @if (SelectedThing.Flags.HasFlag(ThingFlags.Equipment))
        {
            <div class="equipment_label"> Equipment </div>
        }
    </div>

    @if (SelectedThing.HasStats)
    {
        <StatsDisplay Thing=@SelectedThing></StatsDisplay>    
    }

        <!-- <div class="debug"> @thing.GridPos TAGS: @thing.Flags GRID: @thing.ContainingGridManager.GridType @thing.ContainingGridManager.GetThingsAtClient(thing.GridPos).Count() </div> -->
</root>

@code
{
    public Thing SelectedThing { get; set; }

    string GetSelectedClass()
    {
        return SelectedThing != null ? "thing_selected" : "";
    }

    string GetPlayerClass()
    {
        return SelectedThing.PlayerNum > 0 ? $"icon-player-{SelectedThing.PlayerNum}" : "";
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(SelectedThing?.GetInfoDisplayHash() ?? 0);
    }
}