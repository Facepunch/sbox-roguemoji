@using Sandbox;
@using Sandbox.UI;

@inherits Panel;
@namespace Roguemoji

<style>
    .drag_icon 
    {
        width: 42px;
        height: 42px;
        font-size: 29px;
        position: absolute;
        opacity: 0;
        z-index: 20004;
        justify-content: center;
        align-items: center;
        text-align: center;
        font-family: W10Emoji;
    }

    .fade_in
    {
        transition: opacity 0.4s ease;
    }

    .drag_icon_tattoo
    {
        width: 100%;
        height: 100%;
        position: absolute;
        justify-content: center;
        align-items: center;
    }
</style>

@{
    var player = RoguemojiGame.Instance.LocalPlayer;
}

<root class="drag_icon @GetPlayerClass()">
    @Text

    @if (Thing.HasTattoo)
    {
        int fontSize = MathX.FloorToInt(29f * Thing.TattooData.Scale);
        var offset = Thing.TattooData.Offset;
        <div class="drag_icon_tattoo" style="font-size: @(fontSize)px; left: @(offset.x)px; top: @(offset.y)px;">
            @(Hud.GetTattooIcon(Thing))
        </div>
    }
</root>

@code
{
    public Thing Thing { get; set; }
    public string Text { get; set; }
    public int UpdateCount { get; set; }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if(firstTime)
        {
            //AddClass("fade_in");
            //Style.Opacity = 0.75f;
        }
    }

    public override void Tick()
    {
        base.Tick();

        var mousePos = Hud.Instance.GetMousePos();
        Style.Left = mousePos.x - 20f;
        Style.Top = mousePos.y - 20f;


        if(UpdateCount == 1)
        {
            AddClass("fade_in");
            Style.Opacity = 0.75f;
        }     

        UpdateCount++;
    }

    string GetPlayerClass()
    {
        return Thing.PlayerNum > 0 ? $"icon-player-{Thing.PlayerNum}" : "";
    }
}