@using Sandbox;
@using Sandbox.UI;
@using System;

@inherits Panel;
@namespace Roguemoji

<style>
    .char_portrait {
        font-size: 64px;
        background-color: #090909;
        border-radius: 3px;
        text-align: center;
        justify-content: center;
        padding-bottom: 4px;
        font-family: W10Emoji;
    }
</style>

@{
    var player = RoguemojiGame.Instance.LocalPlayer;
}

<root class="char_portrait @GetPlayerClass()">
    
    <span style="opacity:@(GetOpacity(player));">
        @(Hud.GetHallucinationTextThing(player, player.DisplayIcon.Substring(player.CharSkip), HallucinationTextType.Icon))
    </span>

    @if (player.HasFloaters)
    {
        foreach (var floater in player.Floaters)
        {
            Vector2 pos = new Vector2(24f, 26f);

            float scale = floater.height > 0f ? floater.scale * Utils.MapReturn(floater.timeSinceStart, 0f, floater.time, 1f, 1.2f, EasingType.SineInOut) : floater.scale;
            float fontSize = 64f * scale;

            Vector2 offset = floater.time > 0f ? Vector2.Lerp(floater.offsetStart, floater.offsetEnd, Utils.Map(floater.timeSinceStart, 0f, floater.time, 0f, 1f, floater.offsetEasingType)) : floater.offsetStart;

            if (floater.shakeAmount > 0f)
                offset += new Vector2(Game.Random.Float(-floater.shakeAmount, floater.shakeAmount), Game.Random.Float(-floater.shakeAmount, floater.shakeAmount));

            float height = floater.height > 0f ? Utils.MapReturn(floater.timeSinceStart, 0f, floater.time, 0f, floater.height, EasingType.SineInOut) : 0f;

            float growAmount = 64f / 29f;
            offset *= growAmount;
            height *= growAmount;

            var opacity = floater.time > 0f ? (floater.timeSinceStart < floater.fadeInTime ? Utils.Map(floater.timeSinceStart, 0f, floater.fadeInTime, 0f, floater.opacity, EasingType.SineIn) : Utils.Map(floater.timeSinceStart, floater.fadeInTime, floater.time, floater.opacity, 0f, floater.offsetEasingType)) : floater.opacity;

            //Log.Info($"{floater.icon} pos: {pos}");

            <div class="floater_draw" style="left: @(pos.x + offset.x)px; top: @(pos.y + offset.y - height)px; opacity: @(opacity); font-size: @(fontSize)px;">
                @(Hud.GetHallucinationTextStr(floater.icon, HallucinationTextType.Icon))

                @if (!string.IsNullOrEmpty(floater.text))
                {
                    <div class="floater_text" style="top: @((13f / growAmount) * scale)px; font-size: @(fontSize * 0.72f);"> @(floater.text) </div>
                }
            </div>
        }
    }
</root>

@code
{
    string GetPlayerClass()
    {
        var player = RoguemojiGame.Instance.LocalPlayer;
        return (player?.PlayerNum ?? 0) > 0 ? $"icon-player-{player.PlayerNum}" : "";
    }

    protected override Panel CreateTooltipPanel()
    {
        var panel = Hud.Instance.AddChild<CharPortraitTooltip>();
        var player = RoguemojiGame.Instance.LocalPlayer;
        panel.Thing = player;
        return panel;
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        var player = RoguemojiGame.Instance.LocalPlayer;
        Tooltip = player.DisplayName;
    }

    protected override void OnMouseDown(MousePanelEvent e)
    {
        bool rightClick = e.Button == "mouseright";
        bool shift = Input.Down(InputButton.Run);

        var player = RoguemojiGame.Instance.LocalPlayer;
        if (player == null)
            return;

        Hud.Instance.PlayerIconClicked(rightClick, shift);

        Hud.Instance.UnfocusChatbox();
    }

    protected override int BuildHash()
    {
        var player = RoguemojiGame.Instance.LocalPlayer;
        var floaterHash = player.HasFloaters ? Game.Random.Int(0, 9999) : 0;
        return HashCode.Combine(player.GetInfoDisplayHash(), player.ActionRechargePercent, player.StatHash, player.ConfusionSeed, player.HallucinatingSeed, floaterHash);
    }

    float GetOpacity(Thing thing) { return thing.Opacity * (thing.GetStatClamped(StatType.Invisible) > 0 ? 0.25f : 1f); }
}