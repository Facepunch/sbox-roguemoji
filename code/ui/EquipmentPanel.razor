@using System;
@using Sandbox;
@using Sandbox.UI;
@using System.Collections.Generic;
@using System.Linq;

@inherits GridPanel;
@namespace Roguemoji

<style>
    .equipment_bg {
        opacity: 0.005;
        background-color: transparent;
        box-shadow: 0px 0px 0px #bb00ff;
        position:absolute;
        pointer-events:all;
        background-repeat: repeat;
        background-position: 0 0;
        background-size: 84px;
        border-radius:3px;
        width:100%;
        height:100%;
    }

    .nothing_equipped {
        color: transparent;
        text-shadow: 0 0 0.4px #00000044;
        font-size: 25px;
        position: absolute;
        padding: 0 0 3px 0px;
        justify-content: center;
        align-items: center;
        text-align: center;
    }
</style>

<root>
    <div class="equipment_bg" style="background-image: url( textures/bg_tile.png );"></div>

    @{
        var player = RoguemojiGame.Instance.LocalPlayer;
        var gridManager = player.EquipmentGridManager;
    }

    @if (player?.EquipmentGridManager?.Things == null)
    {
        return;
    }

    @for(int x = 0; x < GridWidth; x++)
    {
        for(int y = 0; y < GridHeight; y++)
        {
            var gridPos = new IntVector(x, y);
            if (gridManager.GetThingsAtClient(gridPos).Count() == 0)
            {
                var index = gridManager.GetIndex(gridPos);
                //var offset = GetNothingEquippedOffset(index);
                var offset = new Vector2(2f, 2f);
                <div class="nothing_equipped" style="left: @(gridPos.x * RoguemojiGame.CellSize + offset.x); top: @(gridPos.y * RoguemojiGame.CellSize + offset.y);">
                    @(@Hud.GetHallucinationTextStr(GetNothingEquippedIcon(gridManager.GetIndex(gridPos)), HallucinationTextType.Icon))
                </div>
            }
        }
    }

    @foreach(var thing in GetThings())
    {
        var index = GetIndex(thing.GridPos);
        <GridCell style="left: @(thing.GridPos.x * RoguemojiGame.CellSize); top: @(thing.GridPos.y * RoguemojiGame.CellSize);" Thing=@thing GridIndex=@index />

        @if(thing.HasFloaters)
        {
            <FloaterDisplayCell Thing=@thing></FloaterDisplayCell>
        }

        @if (thing == player.SelectedThing)
        {
            <div class="selected" style="left: @(thing.GridPos.x * RoguemojiGame.CellSize); top: @(thing.GridPos.y * RoguemojiGame.CellSize);"></div>
        }
    }

    <FloaterDisplayGrid GridManager=@gridManager></FloaterDisplayGrid>
</root>

@code
{
    public override int GridWidth => RoguemojiGame.EquipmentWidth;
    public override int GridHeight => RoguemojiGame.EquipmentHeight;

    protected override IList<Thing> GetThings()
    {
        return RoguemojiGame.Instance.LocalPlayer.EquipmentGridManager.Things;
    }

    protected override void OnMouseDown(MousePanelEvent e)
    {
        base.OnMouseDown(e);

        var gridPos = GetGridPos(MousePosition);
        var player = RoguemojiGame.Instance.LocalPlayer;

        if (player.EquipmentGridManager.IsGridPosInBounds(gridPos))
            Hud.Instance.GridCellClicked(gridPos, GridType.Equipment, rightClick: e.Button == "mouseright", shift: Input.Down(InputButton.Run), doubleClick: false);

        Hud.Instance.UnfocusChatbox();
    }

    protected override int BuildHash()
    {
        var player = RoguemojiGame.Instance.LocalPlayer;
        var floaterHash = player.EquipmentGridManager.Floaters.Count > 0 ? Game.Random.Int(0, 9999) : 0;
        return HashCode.Combine(GetThings().Count, player.HallucinatingSeed, floaterHash);
    }

    string GetNothingEquippedIcon(int index)
    {
        switch(index)
        {
            case 0: return "👕";
            case 1: return "🎧️";
            case 2: return "👓️";
            case 3: return "🎒";
            case 4: return "🧦";
            case 5: return "👠";
            case 6: return "🧤";
            case 7: return "🧣";
        }

        return "";
    }
}