@using Sandbox;
@using Sandbox.UI;
@using System.Collections.Generic;
@using System;

@inherits Panel;
@namespace Roguemoji

<style>
    .floater_display
    {
        width: 100%;
        height: 100%;
        pointer-events: none;
        overflow: visible;
        position: absolute;
        z-index: 0;
    }

    .floater_draw
    {
        width: 40px;
        height: 40px;
        position: absolute;
        font-size: 29px;
        color: white;
        z-index: 0;
        justify-content: center;
        align-items: center;
    }

    .floater_text
    {
        font-size: 20px;
        overflow:visible;
        text-align: center;
        position: absolute;
        color: white;
        text-stroke-color: black; 
        text-stroke-width: 5px;
    }
</style>

<root class="floater_display">
    @{
        var player = RoguemojiGame.Instance.LocalPlayer;
    }

    @foreach(var floater in Hud.Instance.Floaters)
    {
        @if (!floater.requireSight || player.IsCellVisible(floater.gridPos))
        {
            var left = (Hud.Instance.GetScreenPosForArenaGridPos(floater.gridPos).x / ScaleToScreen) - 20f;
            var top = (Hud.Instance.GetScreenPosForArenaGridPos(floater.gridPos).y / ScaleToScreen) - 20f;
            var offset = Utils.Map(floater.timeSinceStart, 0f, floater.time, floater.yOffsetStart, floater.yOffsetEnd, floater.offsetEasingType);
            var opacity = floater.timeSinceStart < floater.fadeInTime ? Utils.Map(floater.timeSinceStart, 0f, floater.fadeInTime, 0f, 1f, EasingType.SineIn) : Utils.Map(floater.timeSinceStart, floater.fadeInTime, floater.time, 1f, 0f, floater.offsetEasingType);

            <div class="floater_draw" style="left: @(left); top: @(top + offset); opacity: @(opacity);"> 
                @floater.icon 

                @if(!string.IsNullOrEmpty(floater.text))
                {
                    <div class="floater_text" style="top: @(13f + offset * 1.25f);"> @(floater.text) </div>
                }
            </div>
        }
    }
</root>

@code
{
    public override void Tick()
    {
        base.Tick();

        StateHasChanged();
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Game.Random.Int(0, 999));
    }
}