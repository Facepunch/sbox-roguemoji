@using Sandbox;
@using Sandbox.UI;

@inherits Panel;
@namespace Interfacer

<style>
    .grid 
    {
        
    }
</style>

<root class="grid">
    @for (int i = 0; i < InterfacerGame.GridWidth * InterfacerGame.GridHeight; i++)
    {
        var localI = i;
        var gridPos = GetGridPos(localI);
        <GridCell style="left: @(gridPos.x * 40); top: @(gridPos.y * 40 - 2);" @Index=@localI @onmouseover=@(() => HoveredCellIndex = localI ) @onclick=@(() => OnCellClicked(localI)) />
    }

</root>

@code
{
    public readonly List<GridCell> Cells = new List<GridCell>();

    public int HoveredCellIndex { get; set; }
    public int ClickedCellIndex { get; set; }

    string cellClass(int i)
    {
        return (i % 2) != (i / 10) % 2 ? "dark" : "light";
    }

    public string GetSelectedIndexString()
    {
        if (Hud.Instance.SelectedCell != null)
            return Hud.Instance.SelectedCell.Index.ToString();
        else
            return "None";
    }

    IntVector GetGridPos(int index)
    {
        return new IntVector(index % InterfacerGame.GridWidth, MathX.FloorToInt((float)index / (float)InterfacerGame.GridWidth));
    }

    Vector2 GetCellPos(int index)
    {
        return new Vector2(index % InterfacerGame.GridWidth, MathX.FloorToInt((float)index / (float)InterfacerGame.GridWidth)) * 40f;   
    }

    void OnCellClicked(int index)
    {
        var gridPos = GridManager.GetGridPos(index, Hud.Instance.GridWidth);
        Hud.Instance.GridCellClicked(gridPos.x, gridPos.y);
    }

    protected override void OnChildRemoved( Panel child )
    {
        base.OnChildRemoved( child );

        if(child is GridCell gridCell)
        {
            Cells.Remove(gridCell);    
        }
    }

    protected override void OnChildAdded( Panel child )
    {
        base.OnChildAdded( child );

        if(child is GridCell gridCell)
        {
            Cells.Add(gridCell);
        }
    }

    public GridCell GetCell(int index)
    {
        if (index < Cells.Count)
            return Cells[index];

        return null;
    }

    public GridCell GetCell(int x, int y)
    {
        return GetCell(y * InterfacerGame.GridWidth + x);
    }

    public GridCell GetCell(IntVector gridPos)
    {
        return GetCell(gridPos.y * InterfacerGame.GridWidth + gridPos.x);
    }
}