@using Sandbox;
@using Sandbox.UI;

@inherits Panel;
@namespace Interfacer

<style>
    .inventory_bg 
    {
        opacity: 0.005;
        background-color: transparent;
        box-shadow: 0px 0px 0px #0000ff;

        position:absolute;
        pointer-events:none;
        background-repeat: repeat;
        background-position: 0 0;
        background-size: 80px;
        border-radius:3px;
        width:100%;
        height:100%;
    }
</style>

<root>
    <div class="inventory_bg" style="background-image: url( textures/bg_tile.png );"></div>
    @for (int i = 0; i < InterfacerGame.InventoryWidth * InterfacerGame.InventoryHeight; i++)
    {
        var localI = i;
        var gridPos = GetGridPos(localI);
        <GridCell style="left: @(gridPos.x * 40); top: @(gridPos.y * 40 - 2);" @Index=@localI @onmouseover=@(() => HoveredCellIndex = localI ) @onclick=@(() => OnCellClicked(localI)) />
    }
</root>

@code
{
    public readonly List<GridCell> Cells = new List<GridCell>();

    public int HoveredCellIndex { get; set; }
    public int ClickedCellIndex { get; set; }

    public string GetSelectedIndexString()
    {
        if (Hud.Instance.SelectedCell != null)
            return Hud.Instance.SelectedCell.Index.ToString();
        else
            return "None";
    }

    IntVector GetGridPos(int index)
    {
        return new IntVector(index % InterfacerGame.InventoryWidth, MathX.FloorToInt((float)index / (float)InterfacerGame.InventoryWidth));
    }

    Vector2 GetCellPos(int index)
    {
        return new Vector2(index % InterfacerGame.InventoryWidth, MathX.FloorToInt((float)index / (float)InterfacerGame.InventoryWidth)) * 40f;   
    }

    void OnCellClicked(int index)
    {
        var gridPos = GridManager.GetGridPos(index, InterfacerGame.InventoryWidth);
        Hud.Instance.GridCellClicked(gridPos.x, gridPos.y);
    }

    protected override void OnChildRemoved( Panel child )
    {
        base.OnChildRemoved( child );

        if(child is GridCell gridCell)
        {
            Cells.Remove(gridCell);    
        }
    }

    protected override void OnChildAdded( Panel child )
    {
        base.OnChildAdded( child );

        if(child is GridCell gridCell)
        {
            Cells.Add(gridCell);
        }
    }

    public GridCell GetCell(int index)
    {
        if (index < Cells.Count)
            return Cells[index];

        return null;
    }

    public GridCell GetCell(int x, int y)
    {
        return GetCell(y * InterfacerGame.InventoryWidth + x);
    }

    public GridCell GetCell(IntVector gridPos)
    {
        return GetCell(gridPos.y * InterfacerGame.InventoryWidth + gridPos.x);
    }
}