@using System;
@using Sandbox;
@using Sandbox.UI;
@using System.Collections.Generic;
@using System.Linq;

@inherits GridPanel;
@namespace Roguemoji

<style>
    .inventory_bg {
        width:100%;
        height:100%;
        opacity: 0.005;
        //background-color: transparent;
        //box-shadow: 0px 0px 0px #0000ff;
        position:absolute;
        pointer-events:all;
        background-repeat: repeat;
        background-position: 0 0;
        background-size: 84px;
        border-radius:3px;
    }

    .number_label {
        position: absolute;
        color: #999999;
        font-size: 12;
        font-weight: bold;
        pointer-events: none;
        padding: 0 0 0 2px;
        text-stroke-color: #000000;
        text-stroke-width: 5px;

        &.dimmed
        {
            color: #282828;
            text-stroke-color: #111111;
        }
    }

    .top_row_bg {
        //background-color: #22552210;
        background-color: #ffffff;
        opacity: 0.01;
        pointer-events: none;
        height: 42px;
        border-radius: 3px;
    }
</style>

<root>
    <div class="inventory_bg" style="background-image: url( textures/bg_tile.png );"></div>

    @{
        var player = RoguemojiGame.Instance.LocalPlayer;
    }

    @if (player?.InventoryGridManager?.Things == null)
    {
        return;
    }

    <div class="top_row_bg" style="width: @(RoguemojiGame.CellSize * Math.Min(GridWidth, 10) + (GridWidth > 10 ? -0.5f : 1f))px;"></div>

    @foreach(var thing in GetThings())
    {
        var index = GetIndex(thing.GridPos);
        <GridCell style="left: @(thing.GridPos.x * RoguemojiGame.CellSize); top: @(thing.GridPos.y * RoguemojiGame.CellSize);" Thing=@thing GridIndex=@index />

        if (thing == player.SelectedThing)
        {
            <div class="selected" style="left: @(thing.GridPos.x * RoguemojiGame.CellSize); top: @(thing.GridPos.y * RoguemojiGame.CellSize);"></div>
        }
    }

    @for (int index = 0; index < Math.Min(GridWidth, 10); index++)
    {
        var gridPos = Hud.Instance.GetGridPanel(GridType.Inventory).GetGridPos(index);
        var things = player.InventoryGridManager.GetThingsAtClient(gridPos);
        <div class="number_label @(things.Count() == 0 ? "dimmed" : "")" style="left: @(gridPos.x * RoguemojiGame.CellSize); top: @(gridPos.y * RoguemojiGame.CellSize); z-index:9999;"> 
            @((index + 1 == 10) ? 0 : index + 1) 
        </div>
    }

    @if (player.IsAiming && player.AimingGridType == GridType.Inventory)
    {
        for (int x = -1; x <= player.InventoryGridManager.GridWidth; x++)
        {
            for (int y = -1; y <= player.InventoryGridManager.GridHeight; y++)
            {
                var gridPos = new IntVector(x, y);
                if (player.AimingCells.Contains(gridPos))
                {
                    var aimOpacity = 0.4f + MathF.Sin(Time.Now * 16f) * 0.3f;
                    <div class="aiming_cell" style="left: @(x * RoguemojiGame.CellSize + 1); top: @(y * RoguemojiGame.CellSize + 1); opacity: @(aimOpacity);"></div>

                    @if (player.AimingType == AimingType.TargetCell)
                    {
                        var inventoryPanel = Hud.Instance.GetGridPanel(GridType.Inventory);
                        Log.Info("inventoryPanel.MousePosition: " + inventoryPanel.MousePosition);

                        var mouseGridPos = inventoryPanel.GetGridPos(inventoryPanel.MousePosition);

                        if (gridPos.Equals(mouseGridPos))
                        {
                            var charRect = Hud.Instance.GetRect(PanelType.Character);

                            <div class="aiming_pin" style="left: @((x * RoguemojiGame.CellSize) + 9); top: @((y * RoguemojiGame.CellSize) - 13);">
                                @(Hud.GetHallucinationTextStr("📍", HallucinationTextType.Icon))
                            </div>
                        }
                    }
                }
            }
        }
    }

</root>

@code
{
    public override int GridWidth => RoguemojiGame.Instance.LocalPlayer.InventoryGridManager.GridWidth;
    public override int GridHeight => RoguemojiGame.Instance.LocalPlayer.InventoryGridManager.GridHeight;

    protected override IList<Thing> GetThings()
    {
        return RoguemojiGame.Instance.LocalPlayer.InventoryGridManager.Things;
    }

    protected override void OnMouseDown(MousePanelEvent e)
    {
        base.OnMouseDown(e);

        var player = RoguemojiGame.Instance.LocalPlayer;
        var gridPos = GetGridPos(MousePosition);
        bool rightClick = e.Button == "mouseright";

        if(player.InventoryGridManager.IsGridPosInBounds(gridPos))
        {
            if(player.IsAiming && player.AimingGridType == GridType.Inventory && player.AimingCells.Contains(gridPos))
            {
                if (rightClick)
                    RoguemojiGame.StopAimingCmd();
                else
                    RoguemojiGame.ConfirmAimingCmd(GridType.Inventory, gridPos.x, gridPos.y);
            }
            else
            {
                Hud.Instance.GridCellClicked(gridPos, GridType.Inventory, rightClick: e.Button == "mouseright", shift: Input.Down(InputButton.Run), doubleClick: false);
            }
        }

        Hud.Instance.UnfocusChatbox();
    }

    protected override int BuildHash()
    {
        var player = RoguemojiGame.Instance.LocalPlayer;
        var gridWidthHash = player.InventoryGridManager.GridWidth;
        var selectedThingHash = player.SelectedThing?.NetworkIdent ?? 0;
        var aimingHash = player.IsAiming && player.AimingGridType == GridType.Inventory ? Game.Random.Int(0, 9999) : 0;
        return HashCode.Combine(GetThings().Count, gridWidthHash, selectedThingHash, aimingHash);
    }
}