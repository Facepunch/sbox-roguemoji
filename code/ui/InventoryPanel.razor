@using System;
@using Sandbox;
@using Sandbox.UI;

@inherits GridPanel;
@namespace Roguemoji

<style>
    .inventory_bg 
    {
        opacity: 0.005;
        background-color: transparent;
        box-shadow: 0px 0px 0px #0000ff;

        position:absolute;
        pointer-events:all;
        background-repeat: repeat;
        background-position: 0 0;
        background-size: 80px;
        border-radius:3px;
        width:100%;
        height:100%;
    }

    .number_label
    {
        position: absolute;
        color: #999999;
        font-size: 12;
        font-weight: bold;
        pointer-events: none;
        padding: 1px;
        text-shadow: 0px 2px #000000;

        &.dimmed
        {
            color: #282828;
            text-shadow: 0px 2px #111111;
        }
    }

    .top_row_bg
    {
        background-color: #22552210;
        pointer-events: none;
        height: 40px;
        border-radius: 3px;
    }
</style>

<root>
    <div class="inventory_bg" style="background-image: url( textures/bg_tile.png );"></div>

    @if(RoguemojiGame.Instance.LocalPlayer?.InventoryGridManager?.Things == null)
    {
        return;
    }

    <div class="top_row_bg" style="width: @(40 * RoguemojiGame.InventoryWidth)px;"></div>

    @{
        var player = RoguemojiGame.Instance.LocalPlayer;
    }

    @foreach(var thing in GetThings())
    {
        var index = GetIndex(thing.GridPos);
        <GridCell style="left: @(thing.GridPos.x * 40); top: @(thing.GridPos.y * 40);" Thing=@thing GridIndex=@index @onmouseover=@(() => HoveredCellIndex = index )) />
    }

    @for (int index = 0; index < RoguemojiGame.InventoryWidth; index++)
    {
        var gridPos = Hud.Instance.GetGridPanel(GridType.Inventory).GetGridPos(index);
        var things = player.InventoryGridManager.GetThingsAtClient(gridPos);
        <div class="number_label @(things.Count() == 0 ? "dimmed" : "")" style="left: @(gridPos.x * 40); top: @(gridPos.y * 40); z-index:999;"> @((index + 1 == 10) ? 0 : index + 1) </div>
    }
</root>

@code
{
    public override int GridWidth => RoguemojiGame.InventoryWidth;
    public override int GridHeight => RoguemojiGame.InventoryHeight;

    protected override IList<Thing> GetThings()
    {
        return RoguemojiGame.Instance.LocalPlayer.InventoryGridManager.Things;
    }

    protected override void OnMouseDown(MousePanelEvent e)
    {
        base.OnMouseDown(e);

        Hud.Instance.GridCellClicked(GetGridPos(MousePosition), rightClick: e.Button == "mouseright", shift: Input.Down(InputButton.Run), GridType.Inventory);
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        if (firstTime)
        {
            //Tooltip = "Your inventory.";
        }

        base.OnAfterTreeRender(firstTime);
    }

    protected override Panel CreateTooltipPanel()
    {
        var panel = Hud.Instance.AddChild<CellTooltip>();
        panel.Text = Tooltip;
        panel.Style.Opacity = 0.5f;
        return panel;
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(GetThings().Count);
    }
}