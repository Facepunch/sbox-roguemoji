@using Sandbox;
@using Sandbox.UI;
@using System.Collections.Generic;

@inherits Panel;
@namespace Roguemoji

<style>
    .debug
    {
        width: 1px;
        height: 1px;
        overflow: visible;
    }
</style>

<div class="debug"></div>

@code
{
    public class DebugLineData
    {
        public Vector2 a { get; set; }
        public Vector2 b { get; set; }
        public Color color { get; set; }

        public DebugLineData(Vector2 a, Vector2 b, Color color)
        {
            this.a = a;
            this.b = b;
            this.color = color;
        }
    }

    public class DebugGridCellData
    {
        public IntVector gridPos { get; set; }
        public Color color { get; set; }

        public DebugGridCellData(IntVector gridPos, Color color)
        {
            this.gridPos = gridPos;
            this.color = color;
        }
    }

    public List<DebugLineData> DebugLines { get; private set; } = new List<DebugLineData>();
    public List<DebugGridCellData> DebugGridCells { get; private set; } = new List<DebugGridCellData>();

    public override bool HasContent => true;

    public override void DrawContent(ref RenderState state)
    {
        foreach (var line in DebugLines)
            GraphicsX.Line(line.color, 2f, line.a, 1f, line.b);

        foreach (var cell in DebugGridCells)
            GraphicsX.Circle(GetScreenPosForArenaGridPos(cell.gridPos), 18f / ScaleFromScreen, 15f / ScaleFromScreen, cell.color);

        DebugLines.Clear();
        DebugGridCells.Clear();
    }

    public Vector2 GetScreenPosForArenaGridPos(IntVector gridPos)
    {
        var player = RoguemojiGame.Instance.LocalPlayer;
        var arenaPanel = Hud.Instance.GetGridPanel(GridType.Arena);
        var rect = Hud.Instance.GetRect(PanelType.ArenaGrid);

        return rect.TopLeft + arenaPanel.GetCellPos(gridPos - player.CameraGridOffset) + player.CameraPixelOffset;
    }

    public Vector2 GetScreenPosForPos(Vector2 pos)
    {
        var player = RoguemojiGame.Instance.LocalPlayer;
        var arenaPanel = Hud.Instance.GetGridPanel(GridType.Arena);
        var rect = Hud.Instance.GetRect(PanelType.ArenaGrid);

        return rect.TopLeft + pos - player.CameraGridOffset * 40f + player.CameraPixelOffset;
    }

    public void GridLine(IntVector a, IntVector b, Color color)
    {
        DebugLines.Add(new DebugLineData(GetScreenPosForArenaGridPos(a), GetScreenPosForArenaGridPos(b), color));
    }

    public void Line(Vector2 a, Vector2 b, Color color)
    {
        DebugLines.Add(new DebugLineData(GetScreenPosForPos(a), GetScreenPosForPos(b), color));
    }

    public void GridCell(IntVector gridPos, Color color)
    {
        DebugGridCells.Add(new DebugGridCellData(gridPos, color));
    }
}