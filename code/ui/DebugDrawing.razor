@using Sandbox;
@using Sandbox.UI;
@using System.Collections.Generic;

@inherits Panel;
@namespace Roguemoji

<style>
    .debug
    {
        width: 1px;
        height: 1px;
        overflow: visible;
    }
</style>

<div class="debug"></div>

@code
{
    public class DebugLineData
    {
        public Vector2 a { get; set; }
        public Vector2 b { get; set; }
        public Color color { get; set; }
        public float time { get; set; }

        public DebugLineData(Vector2 a, Vector2 b, Color color, float time)
        {
            this.a = a;
            this.b = b;
            this.color = color;
            this.time = time;
        }
    }

    public class DebugGridCellData
    {
        public IntVector gridPos { get; set; }
        public Color color { get; set; }
        public float time { get; set; }
        public GridType gridType { get; set; }

        public DebugGridCellData(IntVector gridPos, Color color, float time, GridType gridType)
        {
            this.gridPos = gridPos;
            this.color = color;
            this.time = time;
            this.gridType = gridType;
        }
    }

    public List<DebugLineData> DebugLines { get; private set; } = new List<DebugLineData>();
    public List<DebugGridCellData> DebugGridCells { get; private set; } = new List<DebugGridCellData>();

    public override void Tick()
    {
        base.Tick();

        float dt = Time.Delta;

        for(int i = DebugLines.Count - 1; i >= 0; i--)
        {
            var line = DebugLines[i];
            line.time -= dt;
            if(line.time < 0f)
                DebugLines.RemoveAt(i);
        }

        for (int i = DebugGridCells.Count - 1; i >= 0; i--)
        {
            var cell = DebugGridCells[i];
            cell.time -= dt;
            if (cell.time < 0f)
                DebugGridCells.RemoveAt(i);
        }
    }

    public override bool HasContent => true;

    public override void DrawContent(ref RenderState state)
    {
        foreach (var line in DebugLines)
            GraphicsX.Line(line.color, 1f, line.a, 1f, line.b);

        foreach (var cell in DebugGridCells)
        {
            var pos = Hud.Instance.GetScreenPosForGridPos(cell.gridType, cell.gridPos);
            GraphicsX.Circle(pos, 18f / ScaleFromScreen, 15f / ScaleFromScreen, cell.color);
        }

    }

    public void GridLine(IntVector a, IntVector b, Color color, float time, GridType gridTypeA = GridType.Arena, GridType gridTypeB = GridType.Arena)
    {
        var posA = Hud.Instance.GetScreenPosForGridPos(gridTypeA, a);
        var posB = Hud.Instance.GetScreenPosForGridPos(gridTypeB, b);
        DebugLines.Add(new DebugLineData(posA, posB, color, time));
    }

    public void GridCell(IntVector gridPos, Color color, float time, GridType gridType = GridType.Arena)
    {
        DebugGridCells.Add(new DebugGridCellData(gridPos, color, time, gridType));
    }

    public void Restart()
    {
        DebugLines.Clear();
        DebugGridCells.Clear();
    }
}