@using System;
@using Sandbox;
@using Sandbox.UI;

@inherits Panel;
@namespace Roguemoji

<style>
    .character
    {
        flex-direction:row;
        align-items:center;
        justify-content:center;
    }

    .column
    {
        flex-direction:column;       
        align-items: center;
        padding: 10px;
    }

    .row
    {
        flex-direction:row;       
        align-items: center;
    }

    .char_icon
    {
        font-size: 60px;
        background-color: #111111;
        border-radius:3px;
        padding: 2px 4px 8px 4px;
    }

    .name_label
    {
        margin: 0 0 2px 0;
        font-size: 18px;
        color: #ffffff55;
        max-width: 100px;
        overflow:hidden;
        white-space: nowrap;
    }

    .hp_label
    {
        margin: 0 0 5px 0;
        font-size: 22px;
        color: #ffffff77;
    }

    .level_label
    {
        margin: 0 0 5px 0;
        font-size: 22px;
        color: #ffffff44;
    }

    .equipment
    {
        border: 1px solid #ffffff05;
        border-radius: 3px;
        margin: 10px;
        pointer-events: all;
    }

    .wielding
    {
        width: 60px;
        height: 60px;
        font-size: 42px;
        align-items: center;
        justify-content: center;
        border: 1px solid #ffffff05;
        border-radius: 3px;
        padding-bottom: 4px;
        pointer-events: all;
        margin-bottom: 10px;
    }

    .is_wielding_something
    {
        background-color: #5555ff11;
    }

    .input_icon
    {
        width: 30px;
        font-size: 25px;
        margin-right: 4px;
        text-align: right;
    }

    .input_recharge_bar
    {
        width: 100%;
        height: 4px;
        flex-shrink: 0;
        background-color: #333333;
    }

    .input_recharge_bar_overlay 
    {
        height: 100%;
        transform-origin: left;
        position: absolute;
        background-color: #5555ff;
    }
</style>

<root class="character">
    @if(RoguemojiGame.Instance.LocalPlayer == null)
    {
        return;
    }

    @{
        var player = RoguemojiGame.Instance.LocalPlayer;
    }

    <div class="column">
        <div class="name_label"> @player.DisplayName </div>
        <div class="char_icon @GetPlayerClass()" @ref=PlayerIcon @onmousedown=@((PanelEvent e) => OnMouseDownPlayerIcon(e as MousePanelEvent) )> @player.DisplayIcon </div>
        <div class="input_recharge_bar">
                <div class="input_recharge_bar_overlay" style="width: @Utils.Map(player.InputRechargePercent, 0f, 1f, 0f, 100f, EasingType.SineInOut)%; opacity: @Utils.Map(player.InputRechargePercent, 0f, 1f, 0.25f, 1f, EasingType.ExpoIn);"></div>
            </div>

        <div class="hp_label"> @($"{player.Hp}/{player.MaxHp}❤️") </div>
        <!-- <div class="level_label"> @($"Level: {player.CurrentLevelId}") </div> -->
        <!-- <div class="row" style="width: 120px;"> -->

            <!-- <div class="input_icon">@(player.IsInputReady ? "☑️" : "⏳️")</div> -->
            
        <!-- </div> -->
        <!-- <div style="color: white; font-size:14px; max-width: 60px; overflow: visible; white-space: nowrap;"> @player.QueuedActionName </div> -->
    </div>
     <div class="column">
        <div class="wielding @(player.WieldedThing != null ? "is_wielding_something" : "")" @ref=WieldingPanel @onmousedown=@((PanelEvent e) => OnMouseDownWieldable(e as MousePanelEvent) )> 
            @(player.WieldedThing?.DisplayIcon.Substring(player.WieldedThing.CharSkip) ?? "")
        </div>
        <EquipmentPanel class="equipment" style="width: @(40 * RoguemojiGame.EquipmentWidth + 4)px; height: @(40 * RoguemojiGame.EquipmentHeight + 4)px;" @ref=EquipmentPanel></EquipmentPanel>
     </div>
</root>

@code
{
    public EquipmentPanel EquipmentPanel { get; set; }
    public Panel WieldingPanel { get; set; }
    public Panel PlayerIcon { get; set; }

    string GetPlayerClass()
    {
        var player = RoguemojiGame.Instance.LocalPlayer;
        return (player?.PlayerNum ?? 0) > 0 ? $"icon-player-{player.PlayerNum}" : "";
    }

    protected override int BuildHash()
    {
        var player = RoguemojiGame.Instance.LocalPlayer;
        return HashCode.Combine(player.GetInfoDisplayHash(), player.InputRechargePercent);
    }

    public void OnMouseDownWieldable(MousePanelEvent e)
    {
        bool rightClick = e.Button == "mouseright";
        bool shift = Input.Down(InputButton.Run);

        var player = RoguemojiGame.Instance.LocalPlayer;
        if (player == null || player.WieldedThing == null)
            return;

        if(shift || rightClick)
            Hud.Instance.WieldingClicked(rightClick, shift);
        else
            Hud.Instance.StartDragging(player.WieldedThing, this, rightClick);
    }

    public void OnMouseDownPlayerIcon(MousePanelEvent e)
    {
        bool rightClick = e.Button == "mouseright";
        bool shift = Input.Down(InputButton.Run);

        var player = RoguemojiGame.Instance.LocalPlayer;
        if (player == null)
            return;

        Hud.Instance.PlayerIconClicked(rightClick, shift);
    }
}

    